
TP_de_BASE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004908  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004a48  08004a48  00014a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ac8  08004ac8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004ac8  08004ac8  00014ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ad0  08004ad0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ad0  08004ad0  00014ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ad4  08004ad4  00014ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004ad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  20000070  08004b48  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  08004b48  0002034c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b676  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e37  00000000  00000000  0002b70f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000958  00000000  00000000  0002d548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000878  00000000  00000000  0002dea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016597  00000000  00000000  0002e718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c5f1  00000000  00000000  00044caf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086d8f  00000000  00000000  000512a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d802f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002abc  00000000  00000000  000d8084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	08004a30 	.word	0x08004a30

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	08004a30 	.word	0x08004a30

08000180 <__aeabi_fmul>:
 8000180:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000184:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000188:	bf1e      	ittt	ne
 800018a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800018e:	ea92 0f0c 	teqne	r2, ip
 8000192:	ea93 0f0c 	teqne	r3, ip
 8000196:	d06f      	beq.n	8000278 <__aeabi_fmul+0xf8>
 8000198:	441a      	add	r2, r3
 800019a:	ea80 0c01 	eor.w	ip, r0, r1
 800019e:	0240      	lsls	r0, r0, #9
 80001a0:	bf18      	it	ne
 80001a2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80001a6:	d01e      	beq.n	80001e6 <__aeabi_fmul+0x66>
 80001a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80001ac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001b0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001b4:	fba0 3101 	umull	r3, r1, r0, r1
 80001b8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001bc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001c0:	bf3e      	ittt	cc
 80001c2:	0049      	lslcc	r1, r1, #1
 80001c4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001c8:	005b      	lslcc	r3, r3, #1
 80001ca:	ea40 0001 	orr.w	r0, r0, r1
 80001ce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001d2:	2afd      	cmp	r2, #253	; 0xfd
 80001d4:	d81d      	bhi.n	8000212 <__aeabi_fmul+0x92>
 80001d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001de:	bf08      	it	eq
 80001e0:	f020 0001 	biceq.w	r0, r0, #1
 80001e4:	4770      	bx	lr
 80001e6:	f090 0f00 	teq	r0, #0
 80001ea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ee:	bf08      	it	eq
 80001f0:	0249      	lsleq	r1, r1, #9
 80001f2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001f6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001fa:	3a7f      	subs	r2, #127	; 0x7f
 80001fc:	bfc2      	ittt	gt
 80001fe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000202:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000206:	4770      	bxgt	lr
 8000208:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800020c:	f04f 0300 	mov.w	r3, #0
 8000210:	3a01      	subs	r2, #1
 8000212:	dc5d      	bgt.n	80002d0 <__aeabi_fmul+0x150>
 8000214:	f112 0f19 	cmn.w	r2, #25
 8000218:	bfdc      	itt	le
 800021a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800021e:	4770      	bxle	lr
 8000220:	f1c2 0200 	rsb	r2, r2, #0
 8000224:	0041      	lsls	r1, r0, #1
 8000226:	fa21 f102 	lsr.w	r1, r1, r2
 800022a:	f1c2 0220 	rsb	r2, r2, #32
 800022e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000232:	ea5f 0031 	movs.w	r0, r1, rrx
 8000236:	f140 0000 	adc.w	r0, r0, #0
 800023a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800023e:	bf08      	it	eq
 8000240:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000244:	4770      	bx	lr
 8000246:	f092 0f00 	teq	r2, #0
 800024a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800024e:	bf02      	ittt	eq
 8000250:	0040      	lsleq	r0, r0, #1
 8000252:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000256:	3a01      	subeq	r2, #1
 8000258:	d0f9      	beq.n	800024e <__aeabi_fmul+0xce>
 800025a:	ea40 000c 	orr.w	r0, r0, ip
 800025e:	f093 0f00 	teq	r3, #0
 8000262:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000266:	bf02      	ittt	eq
 8000268:	0049      	lsleq	r1, r1, #1
 800026a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800026e:	3b01      	subeq	r3, #1
 8000270:	d0f9      	beq.n	8000266 <__aeabi_fmul+0xe6>
 8000272:	ea41 010c 	orr.w	r1, r1, ip
 8000276:	e78f      	b.n	8000198 <__aeabi_fmul+0x18>
 8000278:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800027c:	ea92 0f0c 	teq	r2, ip
 8000280:	bf18      	it	ne
 8000282:	ea93 0f0c 	teqne	r3, ip
 8000286:	d00a      	beq.n	800029e <__aeabi_fmul+0x11e>
 8000288:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800028c:	bf18      	it	ne
 800028e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000292:	d1d8      	bne.n	8000246 <__aeabi_fmul+0xc6>
 8000294:	ea80 0001 	eor.w	r0, r0, r1
 8000298:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800029c:	4770      	bx	lr
 800029e:	f090 0f00 	teq	r0, #0
 80002a2:	bf17      	itett	ne
 80002a4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80002a8:	4608      	moveq	r0, r1
 80002aa:	f091 0f00 	teqne	r1, #0
 80002ae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002b2:	d014      	beq.n	80002de <__aeabi_fmul+0x15e>
 80002b4:	ea92 0f0c 	teq	r2, ip
 80002b8:	d101      	bne.n	80002be <__aeabi_fmul+0x13e>
 80002ba:	0242      	lsls	r2, r0, #9
 80002bc:	d10f      	bne.n	80002de <__aeabi_fmul+0x15e>
 80002be:	ea93 0f0c 	teq	r3, ip
 80002c2:	d103      	bne.n	80002cc <__aeabi_fmul+0x14c>
 80002c4:	024b      	lsls	r3, r1, #9
 80002c6:	bf18      	it	ne
 80002c8:	4608      	movne	r0, r1
 80002ca:	d108      	bne.n	80002de <__aeabi_fmul+0x15e>
 80002cc:	ea80 0001 	eor.w	r0, r0, r1
 80002d0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002dc:	4770      	bx	lr
 80002de:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002e2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_drsub>:
 80002e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002ec:	e002      	b.n	80002f4 <__adddf3>
 80002ee:	bf00      	nop

080002f0 <__aeabi_dsub>:
 80002f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002f4 <__adddf3>:
 80002f4:	b530      	push	{r4, r5, lr}
 80002f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002fe:	ea94 0f05 	teq	r4, r5
 8000302:	bf08      	it	eq
 8000304:	ea90 0f02 	teqeq	r0, r2
 8000308:	bf1f      	itttt	ne
 800030a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800030e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000312:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000316:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800031a:	f000 80e2 	beq.w	80004e2 <__adddf3+0x1ee>
 800031e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000322:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000326:	bfb8      	it	lt
 8000328:	426d      	neglt	r5, r5
 800032a:	dd0c      	ble.n	8000346 <__adddf3+0x52>
 800032c:	442c      	add	r4, r5
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	ea82 0000 	eor.w	r0, r2, r0
 800033a:	ea83 0101 	eor.w	r1, r3, r1
 800033e:	ea80 0202 	eor.w	r2, r0, r2
 8000342:	ea81 0303 	eor.w	r3, r1, r3
 8000346:	2d36      	cmp	r5, #54	; 0x36
 8000348:	bf88      	it	hi
 800034a:	bd30      	pophi	{r4, r5, pc}
 800034c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000350:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000354:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000358:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800035c:	d002      	beq.n	8000364 <__adddf3+0x70>
 800035e:	4240      	negs	r0, r0
 8000360:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000364:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000368:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800036c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000370:	d002      	beq.n	8000378 <__adddf3+0x84>
 8000372:	4252      	negs	r2, r2
 8000374:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000378:	ea94 0f05 	teq	r4, r5
 800037c:	f000 80a7 	beq.w	80004ce <__adddf3+0x1da>
 8000380:	f1a4 0401 	sub.w	r4, r4, #1
 8000384:	f1d5 0e20 	rsbs	lr, r5, #32
 8000388:	db0d      	blt.n	80003a6 <__adddf3+0xb2>
 800038a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800038e:	fa22 f205 	lsr.w	r2, r2, r5
 8000392:	1880      	adds	r0, r0, r2
 8000394:	f141 0100 	adc.w	r1, r1, #0
 8000398:	fa03 f20e 	lsl.w	r2, r3, lr
 800039c:	1880      	adds	r0, r0, r2
 800039e:	fa43 f305 	asr.w	r3, r3, r5
 80003a2:	4159      	adcs	r1, r3
 80003a4:	e00e      	b.n	80003c4 <__adddf3+0xd0>
 80003a6:	f1a5 0520 	sub.w	r5, r5, #32
 80003aa:	f10e 0e20 	add.w	lr, lr, #32
 80003ae:	2a01      	cmp	r2, #1
 80003b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003b4:	bf28      	it	cs
 80003b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003ba:	fa43 f305 	asr.w	r3, r3, r5
 80003be:	18c0      	adds	r0, r0, r3
 80003c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c8:	d507      	bpl.n	80003da <__adddf3+0xe6>
 80003ca:	f04f 0e00 	mov.w	lr, #0
 80003ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80003d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003de:	d31b      	bcc.n	8000418 <__adddf3+0x124>
 80003e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003e4:	d30c      	bcc.n	8000400 <__adddf3+0x10c>
 80003e6:	0849      	lsrs	r1, r1, #1
 80003e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f0:	f104 0401 	add.w	r4, r4, #1
 80003f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003fc:	f080 809a 	bcs.w	8000534 <__adddf3+0x240>
 8000400:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000404:	bf08      	it	eq
 8000406:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800040a:	f150 0000 	adcs.w	r0, r0, #0
 800040e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000412:	ea41 0105 	orr.w	r1, r1, r5
 8000416:	bd30      	pop	{r4, r5, pc}
 8000418:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800041c:	4140      	adcs	r0, r0
 800041e:	eb41 0101 	adc.w	r1, r1, r1
 8000422:	3c01      	subs	r4, #1
 8000424:	bf28      	it	cs
 8000426:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800042a:	d2e9      	bcs.n	8000400 <__adddf3+0x10c>
 800042c:	f091 0f00 	teq	r1, #0
 8000430:	bf04      	itt	eq
 8000432:	4601      	moveq	r1, r0
 8000434:	2000      	moveq	r0, #0
 8000436:	fab1 f381 	clz	r3, r1
 800043a:	bf08      	it	eq
 800043c:	3320      	addeq	r3, #32
 800043e:	f1a3 030b 	sub.w	r3, r3, #11
 8000442:	f1b3 0220 	subs.w	r2, r3, #32
 8000446:	da0c      	bge.n	8000462 <__adddf3+0x16e>
 8000448:	320c      	adds	r2, #12
 800044a:	dd08      	ble.n	800045e <__adddf3+0x16a>
 800044c:	f102 0c14 	add.w	ip, r2, #20
 8000450:	f1c2 020c 	rsb	r2, r2, #12
 8000454:	fa01 f00c 	lsl.w	r0, r1, ip
 8000458:	fa21 f102 	lsr.w	r1, r1, r2
 800045c:	e00c      	b.n	8000478 <__adddf3+0x184>
 800045e:	f102 0214 	add.w	r2, r2, #20
 8000462:	bfd8      	it	le
 8000464:	f1c2 0c20 	rsble	ip, r2, #32
 8000468:	fa01 f102 	lsl.w	r1, r1, r2
 800046c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000470:	bfdc      	itt	le
 8000472:	ea41 010c 	orrle.w	r1, r1, ip
 8000476:	4090      	lslle	r0, r2
 8000478:	1ae4      	subs	r4, r4, r3
 800047a:	bfa2      	ittt	ge
 800047c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000480:	4329      	orrge	r1, r5
 8000482:	bd30      	popge	{r4, r5, pc}
 8000484:	ea6f 0404 	mvn.w	r4, r4
 8000488:	3c1f      	subs	r4, #31
 800048a:	da1c      	bge.n	80004c6 <__adddf3+0x1d2>
 800048c:	340c      	adds	r4, #12
 800048e:	dc0e      	bgt.n	80004ae <__adddf3+0x1ba>
 8000490:	f104 0414 	add.w	r4, r4, #20
 8000494:	f1c4 0220 	rsb	r2, r4, #32
 8000498:	fa20 f004 	lsr.w	r0, r0, r4
 800049c:	fa01 f302 	lsl.w	r3, r1, r2
 80004a0:	ea40 0003 	orr.w	r0, r0, r3
 80004a4:	fa21 f304 	lsr.w	r3, r1, r4
 80004a8:	ea45 0103 	orr.w	r1, r5, r3
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f1c4 040c 	rsb	r4, r4, #12
 80004b2:	f1c4 0220 	rsb	r2, r4, #32
 80004b6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ba:	fa01 f304 	lsl.w	r3, r1, r4
 80004be:	ea40 0003 	orr.w	r0, r0, r3
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	f094 0f00 	teq	r4, #0
 80004d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004d6:	bf06      	itte	eq
 80004d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004dc:	3401      	addeq	r4, #1
 80004de:	3d01      	subne	r5, #1
 80004e0:	e74e      	b.n	8000380 <__adddf3+0x8c>
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf18      	it	ne
 80004e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ec:	d029      	beq.n	8000542 <__adddf3+0x24e>
 80004ee:	ea94 0f05 	teq	r4, r5
 80004f2:	bf08      	it	eq
 80004f4:	ea90 0f02 	teqeq	r0, r2
 80004f8:	d005      	beq.n	8000506 <__adddf3+0x212>
 80004fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80004fe:	bf04      	itt	eq
 8000500:	4619      	moveq	r1, r3
 8000502:	4610      	moveq	r0, r2
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	ea91 0f03 	teq	r1, r3
 800050a:	bf1e      	ittt	ne
 800050c:	2100      	movne	r1, #0
 800050e:	2000      	movne	r0, #0
 8000510:	bd30      	popne	{r4, r5, pc}
 8000512:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000516:	d105      	bne.n	8000524 <__adddf3+0x230>
 8000518:	0040      	lsls	r0, r0, #1
 800051a:	4149      	adcs	r1, r1
 800051c:	bf28      	it	cs
 800051e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000522:	bd30      	pop	{r4, r5, pc}
 8000524:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000528:	bf3c      	itt	cc
 800052a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800052e:	bd30      	popcc	{r4, r5, pc}
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000538:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800053c:	f04f 0000 	mov.w	r0, #0
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000546:	bf1a      	itte	ne
 8000548:	4619      	movne	r1, r3
 800054a:	4610      	movne	r0, r2
 800054c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000550:	bf1c      	itt	ne
 8000552:	460b      	movne	r3, r1
 8000554:	4602      	movne	r2, r0
 8000556:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800055a:	bf06      	itte	eq
 800055c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000560:	ea91 0f03 	teqeq	r1, r3
 8000564:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	bf00      	nop

0800056c <__aeabi_ui2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f04f 0500 	mov.w	r5, #0
 8000584:	f04f 0100 	mov.w	r1, #0
 8000588:	e750      	b.n	800042c <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_i2d>:
 800058c:	f090 0f00 	teq	r0, #0
 8000590:	bf04      	itt	eq
 8000592:	2100      	moveq	r1, #0
 8000594:	4770      	bxeq	lr
 8000596:	b530      	push	{r4, r5, lr}
 8000598:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005a4:	bf48      	it	mi
 80005a6:	4240      	negmi	r0, r0
 80005a8:	f04f 0100 	mov.w	r1, #0
 80005ac:	e73e      	b.n	800042c <__adddf3+0x138>
 80005ae:	bf00      	nop

080005b0 <__aeabi_f2d>:
 80005b0:	0042      	lsls	r2, r0, #1
 80005b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005be:	bf1f      	itttt	ne
 80005c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005cc:	4770      	bxne	lr
 80005ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005d2:	bf08      	it	eq
 80005d4:	4770      	bxeq	lr
 80005d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005da:	bf04      	itt	eq
 80005dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e0:	4770      	bxeq	lr
 80005e2:	b530      	push	{r4, r5, lr}
 80005e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	e71c      	b.n	800042c <__adddf3+0x138>
 80005f2:	bf00      	nop

080005f4 <__aeabi_ul2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	e00a      	b.n	800061a <__aeabi_l2d+0x16>

08000604 <__aeabi_l2d>:
 8000604:	ea50 0201 	orrs.w	r2, r0, r1
 8000608:	bf08      	it	eq
 800060a:	4770      	bxeq	lr
 800060c:	b530      	push	{r4, r5, lr}
 800060e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000612:	d502      	bpl.n	800061a <__aeabi_l2d+0x16>
 8000614:	4240      	negs	r0, r0
 8000616:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800061a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800061e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000622:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000626:	f43f aed8 	beq.w	80003da <__adddf3+0xe6>
 800062a:	f04f 0203 	mov.w	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000642:	f1c2 0320 	rsb	r3, r2, #32
 8000646:	fa00 fc03 	lsl.w	ip, r0, r3
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000652:	ea40 000e 	orr.w	r0, r0, lr
 8000656:	fa21 f102 	lsr.w	r1, r1, r2
 800065a:	4414      	add	r4, r2
 800065c:	e6bd      	b.n	80003da <__adddf3+0xe6>
 800065e:	bf00      	nop

08000660 <__aeabi_dmul>:
 8000660:	b570      	push	{r4, r5, r6, lr}
 8000662:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000666:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800066a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800066e:	bf1d      	ittte	ne
 8000670:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000674:	ea94 0f0c 	teqne	r4, ip
 8000678:	ea95 0f0c 	teqne	r5, ip
 800067c:	f000 f8de 	bleq	800083c <__aeabi_dmul+0x1dc>
 8000680:	442c      	add	r4, r5
 8000682:	ea81 0603 	eor.w	r6, r1, r3
 8000686:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800068a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800068e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000692:	bf18      	it	ne
 8000694:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000698:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800069c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a0:	d038      	beq.n	8000714 <__aeabi_dmul+0xb4>
 80006a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006b6:	f04f 0600 	mov.w	r6, #0
 80006ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006be:	f09c 0f00 	teq	ip, #0
 80006c2:	bf18      	it	ne
 80006c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006d4:	d204      	bcs.n	80006e0 <__aeabi_dmul+0x80>
 80006d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006da:	416d      	adcs	r5, r5
 80006dc:	eb46 0606 	adc.w	r6, r6, r6
 80006e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f8:	bf88      	it	hi
 80006fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006fe:	d81e      	bhi.n	800073e <__aeabi_dmul+0xde>
 8000700:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000704:	bf08      	it	eq
 8000706:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800070a:	f150 0000 	adcs.w	r0, r0, #0
 800070e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000718:	ea46 0101 	orr.w	r1, r6, r1
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000728:	bfc2      	ittt	gt
 800072a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800072e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000732:	bd70      	popgt	{r4, r5, r6, pc}
 8000734:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000738:	f04f 0e00 	mov.w	lr, #0
 800073c:	3c01      	subs	r4, #1
 800073e:	f300 80ab 	bgt.w	8000898 <__aeabi_dmul+0x238>
 8000742:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000746:	bfde      	ittt	le
 8000748:	2000      	movle	r0, #0
 800074a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd70      	pople	{r4, r5, r6, pc}
 8000750:	f1c4 0400 	rsb	r4, r4, #0
 8000754:	3c20      	subs	r4, #32
 8000756:	da35      	bge.n	80007c4 <__aeabi_dmul+0x164>
 8000758:	340c      	adds	r4, #12
 800075a:	dc1b      	bgt.n	8000794 <__aeabi_dmul+0x134>
 800075c:	f104 0414 	add.w	r4, r4, #20
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f305 	lsl.w	r3, r0, r5
 8000768:	fa20 f004 	lsr.w	r0, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000778:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	fa21 f604 	lsr.w	r6, r1, r4
 8000784:	eb42 0106 	adc.w	r1, r2, r6
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 040c 	rsb	r4, r4, #12
 8000798:	f1c4 0520 	rsb	r5, r4, #32
 800079c:	fa00 f304 	lsl.w	r3, r0, r4
 80007a0:	fa20 f005 	lsr.w	r0, r0, r5
 80007a4:	fa01 f204 	lsl.w	r2, r1, r4
 80007a8:	ea40 0002 	orr.w	r0, r0, r2
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007b4:	f141 0100 	adc.w	r1, r1, #0
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f1c4 0520 	rsb	r5, r4, #32
 80007c8:	fa00 f205 	lsl.w	r2, r0, r5
 80007cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d0:	fa20 f304 	lsr.w	r3, r0, r4
 80007d4:	fa01 f205 	lsl.w	r2, r1, r5
 80007d8:	ea43 0302 	orr.w	r3, r3, r2
 80007dc:	fa21 f004 	lsr.w	r0, r1, r4
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	fa21 f204 	lsr.w	r2, r1, r4
 80007e8:	ea20 0002 	bic.w	r0, r0, r2
 80007ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f4:	bf08      	it	eq
 80007f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007fa:	bd70      	pop	{r4, r5, r6, pc}
 80007fc:	f094 0f00 	teq	r4, #0
 8000800:	d10f      	bne.n	8000822 <__aeabi_dmul+0x1c2>
 8000802:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000806:	0040      	lsls	r0, r0, #1
 8000808:	eb41 0101 	adc.w	r1, r1, r1
 800080c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3c01      	subeq	r4, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1a6>
 8000816:	ea41 0106 	orr.w	r1, r1, r6
 800081a:	f095 0f00 	teq	r5, #0
 800081e:	bf18      	it	ne
 8000820:	4770      	bxne	lr
 8000822:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000826:	0052      	lsls	r2, r2, #1
 8000828:	eb43 0303 	adc.w	r3, r3, r3
 800082c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000830:	bf08      	it	eq
 8000832:	3d01      	subeq	r5, #1
 8000834:	d0f7      	beq.n	8000826 <__aeabi_dmul+0x1c6>
 8000836:	ea43 0306 	orr.w	r3, r3, r6
 800083a:	4770      	bx	lr
 800083c:	ea94 0f0c 	teq	r4, ip
 8000840:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000844:	bf18      	it	ne
 8000846:	ea95 0f0c 	teqne	r5, ip
 800084a:	d00c      	beq.n	8000866 <__aeabi_dmul+0x206>
 800084c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000850:	bf18      	it	ne
 8000852:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000856:	d1d1      	bne.n	80007fc <__aeabi_dmul+0x19c>
 8000858:	ea81 0103 	eor.w	r1, r1, r3
 800085c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000860:	f04f 0000 	mov.w	r0, #0
 8000864:	bd70      	pop	{r4, r5, r6, pc}
 8000866:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800086a:	bf06      	itte	eq
 800086c:	4610      	moveq	r0, r2
 800086e:	4619      	moveq	r1, r3
 8000870:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000874:	d019      	beq.n	80008aa <__aeabi_dmul+0x24a>
 8000876:	ea94 0f0c 	teq	r4, ip
 800087a:	d102      	bne.n	8000882 <__aeabi_dmul+0x222>
 800087c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000880:	d113      	bne.n	80008aa <__aeabi_dmul+0x24a>
 8000882:	ea95 0f0c 	teq	r5, ip
 8000886:	d105      	bne.n	8000894 <__aeabi_dmul+0x234>
 8000888:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800088c:	bf1c      	itt	ne
 800088e:	4610      	movne	r0, r2
 8000890:	4619      	movne	r1, r3
 8000892:	d10a      	bne.n	80008aa <__aeabi_dmul+0x24a>
 8000894:	ea81 0103 	eor.w	r1, r1, r3
 8000898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800089c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	bd70      	pop	{r4, r5, r6, pc}
 80008aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008b2:	bd70      	pop	{r4, r5, r6, pc}

080008b4 <__aeabi_ddiv>:
 80008b4:	b570      	push	{r4, r5, r6, lr}
 80008b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008c2:	bf1d      	ittte	ne
 80008c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c8:	ea94 0f0c 	teqne	r4, ip
 80008cc:	ea95 0f0c 	teqne	r5, ip
 80008d0:	f000 f8a7 	bleq	8000a22 <__aeabi_ddiv+0x16e>
 80008d4:	eba4 0405 	sub.w	r4, r4, r5
 80008d8:	ea81 0e03 	eor.w	lr, r1, r3
 80008dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008e4:	f000 8088 	beq.w	80009f8 <__aeabi_ddiv+0x144>
 80008e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000900:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000904:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000908:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800090c:	429d      	cmp	r5, r3
 800090e:	bf08      	it	eq
 8000910:	4296      	cmpeq	r6, r2
 8000912:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000916:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800091a:	d202      	bcs.n	8000922 <__aeabi_ddiv+0x6e>
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000922:	1ab6      	subs	r6, r6, r2
 8000924:	eb65 0503 	sbc.w	r5, r5, r3
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000932:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 000c 	orrcs.w	r0, r0, ip
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000978:	085b      	lsrs	r3, r3, #1
 800097a:	ea4f 0232 	mov.w	r2, r2, rrx
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000990:	ea55 0e06 	orrs.w	lr, r5, r6
 8000994:	d018      	beq.n	80009c8 <__aeabi_ddiv+0x114>
 8000996:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800099a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800099e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009b2:	d1c0      	bne.n	8000936 <__aeabi_ddiv+0x82>
 80009b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b8:	d10b      	bne.n	80009d2 <__aeabi_ddiv+0x11e>
 80009ba:	ea41 0100 	orr.w	r1, r1, r0
 80009be:	f04f 0000 	mov.w	r0, #0
 80009c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009c6:	e7b6      	b.n	8000936 <__aeabi_ddiv+0x82>
 80009c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009cc:	bf04      	itt	eq
 80009ce:	4301      	orreq	r1, r0
 80009d0:	2000      	moveq	r0, #0
 80009d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009d6:	bf88      	it	hi
 80009d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009dc:	f63f aeaf 	bhi.w	800073e <__aeabi_dmul+0xde>
 80009e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009e4:	bf04      	itt	eq
 80009e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ee:	f150 0000 	adcs.w	r0, r0, #0
 80009f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	pop	{r4, r5, r6, pc}
 80009f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a00:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a04:	bfc2      	ittt	gt
 8000a06:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a0a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a0e:	bd70      	popgt	{r4, r5, r6, pc}
 8000a10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a14:	f04f 0e00 	mov.w	lr, #0
 8000a18:	3c01      	subs	r4, #1
 8000a1a:	e690      	b.n	800073e <__aeabi_dmul+0xde>
 8000a1c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a20:	e68d      	b.n	800073e <__aeabi_dmul+0xde>
 8000a22:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a26:	ea94 0f0c 	teq	r4, ip
 8000a2a:	bf08      	it	eq
 8000a2c:	ea95 0f0c 	teqeq	r5, ip
 8000a30:	f43f af3b 	beq.w	80008aa <__aeabi_dmul+0x24a>
 8000a34:	ea94 0f0c 	teq	r4, ip
 8000a38:	d10a      	bne.n	8000a50 <__aeabi_ddiv+0x19c>
 8000a3a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a3e:	f47f af34 	bne.w	80008aa <__aeabi_dmul+0x24a>
 8000a42:	ea95 0f0c 	teq	r5, ip
 8000a46:	f47f af25 	bne.w	8000894 <__aeabi_dmul+0x234>
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	e72c      	b.n	80008aa <__aeabi_dmul+0x24a>
 8000a50:	ea95 0f0c 	teq	r5, ip
 8000a54:	d106      	bne.n	8000a64 <__aeabi_ddiv+0x1b0>
 8000a56:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a5a:	f43f aefd 	beq.w	8000858 <__aeabi_dmul+0x1f8>
 8000a5e:	4610      	mov	r0, r2
 8000a60:	4619      	mov	r1, r3
 8000a62:	e722      	b.n	80008aa <__aeabi_dmul+0x24a>
 8000a64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a6e:	f47f aec5 	bne.w	80007fc <__aeabi_dmul+0x19c>
 8000a72:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a76:	f47f af0d 	bne.w	8000894 <__aeabi_dmul+0x234>
 8000a7a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a7e:	f47f aeeb 	bne.w	8000858 <__aeabi_dmul+0x1f8>
 8000a82:	e712      	b.n	80008aa <__aeabi_dmul+0x24a>

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	; 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_f2uiz>:
 8000d40:	0042      	lsls	r2, r0, #1
 8000d42:	d20e      	bcs.n	8000d62 <__aeabi_f2uiz+0x22>
 8000d44:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d48:	d30b      	bcc.n	8000d62 <__aeabi_f2uiz+0x22>
 8000d4a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d4e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d52:	d409      	bmi.n	8000d68 <__aeabi_f2uiz+0x28>
 8000d54:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d5c:	fa23 f002 	lsr.w	r0, r3, r2
 8000d60:	4770      	bx	lr
 8000d62:	f04f 0000 	mov.w	r0, #0
 8000d66:	4770      	bx	lr
 8000d68:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d6c:	d101      	bne.n	8000d72 <__aeabi_f2uiz+0x32>
 8000d6e:	0242      	lsls	r2, r0, #9
 8000d70:	d102      	bne.n	8000d78 <__aeabi_f2uiz+0x38>
 8000d72:	f04f 30ff 	mov.w	r0, #4294967295
 8000d76:	4770      	bx	lr
 8000d78:	f04f 0000 	mov.w	r0, #0
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <__aeabi_uldivmod>:
 8000d80:	b953      	cbnz	r3, 8000d98 <__aeabi_uldivmod+0x18>
 8000d82:	b94a      	cbnz	r2, 8000d98 <__aeabi_uldivmod+0x18>
 8000d84:	2900      	cmp	r1, #0
 8000d86:	bf08      	it	eq
 8000d88:	2800      	cmpeq	r0, #0
 8000d8a:	bf1c      	itt	ne
 8000d8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000d90:	f04f 30ff 	movne.w	r0, #4294967295
 8000d94:	f000 b96e 	b.w	8001074 <__aeabi_idiv0>
 8000d98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000da0:	f000 f806 	bl	8000db0 <__udivmoddi4>
 8000da4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000da8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dac:	b004      	add	sp, #16
 8000dae:	4770      	bx	lr

08000db0 <__udivmoddi4>:
 8000db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000db4:	9e08      	ldr	r6, [sp, #32]
 8000db6:	460d      	mov	r5, r1
 8000db8:	4604      	mov	r4, r0
 8000dba:	468e      	mov	lr, r1
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	f040 8083 	bne.w	8000ec8 <__udivmoddi4+0x118>
 8000dc2:	428a      	cmp	r2, r1
 8000dc4:	4617      	mov	r7, r2
 8000dc6:	d947      	bls.n	8000e58 <__udivmoddi4+0xa8>
 8000dc8:	fab2 f382 	clz	r3, r2
 8000dcc:	b14b      	cbz	r3, 8000de2 <__udivmoddi4+0x32>
 8000dce:	f1c3 0120 	rsb	r1, r3, #32
 8000dd2:	fa05 fe03 	lsl.w	lr, r5, r3
 8000dd6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dda:	409f      	lsls	r7, r3
 8000ddc:	ea41 0e0e 	orr.w	lr, r1, lr
 8000de0:	409c      	lsls	r4, r3
 8000de2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000de6:	fbbe fcf8 	udiv	ip, lr, r8
 8000dea:	fa1f f987 	uxth.w	r9, r7
 8000dee:	fb08 e21c 	mls	r2, r8, ip, lr
 8000df2:	fb0c f009 	mul.w	r0, ip, r9
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000dfc:	4290      	cmp	r0, r2
 8000dfe:	d90a      	bls.n	8000e16 <__udivmoddi4+0x66>
 8000e00:	18ba      	adds	r2, r7, r2
 8000e02:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000e06:	f080 8118 	bcs.w	800103a <__udivmoddi4+0x28a>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f240 8115 	bls.w	800103a <__udivmoddi4+0x28a>
 8000e10:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e14:	443a      	add	r2, r7
 8000e16:	1a12      	subs	r2, r2, r0
 8000e18:	fbb2 f0f8 	udiv	r0, r2, r8
 8000e1c:	fb08 2210 	mls	r2, r8, r0, r2
 8000e20:	fb00 f109 	mul.w	r1, r0, r9
 8000e24:	b2a4      	uxth	r4, r4
 8000e26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e2a:	42a1      	cmp	r1, r4
 8000e2c:	d909      	bls.n	8000e42 <__udivmoddi4+0x92>
 8000e2e:	193c      	adds	r4, r7, r4
 8000e30:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e34:	f080 8103 	bcs.w	800103e <__udivmoddi4+0x28e>
 8000e38:	42a1      	cmp	r1, r4
 8000e3a:	f240 8100 	bls.w	800103e <__udivmoddi4+0x28e>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	443c      	add	r4, r7
 8000e42:	1a64      	subs	r4, r4, r1
 8000e44:	2100      	movs	r1, #0
 8000e46:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4a:	b11e      	cbz	r6, 8000e54 <__udivmoddi4+0xa4>
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	40dc      	lsrs	r4, r3
 8000e50:	e9c6 4200 	strd	r4, r2, [r6]
 8000e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e58:	b902      	cbnz	r2, 8000e5c <__udivmoddi4+0xac>
 8000e5a:	deff      	udf	#255	; 0xff
 8000e5c:	fab2 f382 	clz	r3, r2
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d14f      	bne.n	8000f04 <__udivmoddi4+0x154>
 8000e64:	1a8d      	subs	r5, r1, r2
 8000e66:	2101      	movs	r1, #1
 8000e68:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000e6c:	fa1f f882 	uxth.w	r8, r2
 8000e70:	fbb5 fcfe 	udiv	ip, r5, lr
 8000e74:	fb0e 551c 	mls	r5, lr, ip, r5
 8000e78:	fb08 f00c 	mul.w	r0, r8, ip
 8000e7c:	0c22      	lsrs	r2, r4, #16
 8000e7e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000e82:	42a8      	cmp	r0, r5
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0xe6>
 8000e86:	197d      	adds	r5, r7, r5
 8000e88:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000e8c:	d202      	bcs.n	8000e94 <__udivmoddi4+0xe4>
 8000e8e:	42a8      	cmp	r0, r5
 8000e90:	f200 80e9 	bhi.w	8001066 <__udivmoddi4+0x2b6>
 8000e94:	4694      	mov	ip, r2
 8000e96:	1a2d      	subs	r5, r5, r0
 8000e98:	fbb5 f0fe 	udiv	r0, r5, lr
 8000e9c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000ea0:	fb08 f800 	mul.w	r8, r8, r0
 8000ea4:	b2a4      	uxth	r4, r4
 8000ea6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eaa:	45a0      	cmp	r8, r4
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x10e>
 8000eae:	193c      	adds	r4, r7, r4
 8000eb0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb4:	d202      	bcs.n	8000ebc <__udivmoddi4+0x10c>
 8000eb6:	45a0      	cmp	r8, r4
 8000eb8:	f200 80d9 	bhi.w	800106e <__udivmoddi4+0x2be>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	eba4 0408 	sub.w	r4, r4, r8
 8000ec2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ec6:	e7c0      	b.n	8000e4a <__udivmoddi4+0x9a>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d908      	bls.n	8000ede <__udivmoddi4+0x12e>
 8000ecc:	2e00      	cmp	r6, #0
 8000ece:	f000 80b1 	beq.w	8001034 <__udivmoddi4+0x284>
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e9c6 0500 	strd	r0, r5, [r6]
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ede:	fab3 f183 	clz	r1, r3
 8000ee2:	2900      	cmp	r1, #0
 8000ee4:	d14b      	bne.n	8000f7e <__udivmoddi4+0x1ce>
 8000ee6:	42ab      	cmp	r3, r5
 8000ee8:	d302      	bcc.n	8000ef0 <__udivmoddi4+0x140>
 8000eea:	4282      	cmp	r2, r0
 8000eec:	f200 80b9 	bhi.w	8001062 <__udivmoddi4+0x2b2>
 8000ef0:	1a84      	subs	r4, r0, r2
 8000ef2:	eb65 0303 	sbc.w	r3, r5, r3
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	469e      	mov	lr, r3
 8000efa:	2e00      	cmp	r6, #0
 8000efc:	d0aa      	beq.n	8000e54 <__udivmoddi4+0xa4>
 8000efe:	e9c6 4e00 	strd	r4, lr, [r6]
 8000f02:	e7a7      	b.n	8000e54 <__udivmoddi4+0xa4>
 8000f04:	409f      	lsls	r7, r3
 8000f06:	f1c3 0220 	rsb	r2, r3, #32
 8000f0a:	40d1      	lsrs	r1, r2
 8000f0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f14:	fa1f f887 	uxth.w	r8, r7
 8000f18:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f1c:	fa24 f202 	lsr.w	r2, r4, r2
 8000f20:	409d      	lsls	r5, r3
 8000f22:	fb00 fc08 	mul.w	ip, r0, r8
 8000f26:	432a      	orrs	r2, r5
 8000f28:	0c15      	lsrs	r5, r2, #16
 8000f2a:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000f2e:	45ac      	cmp	ip, r5
 8000f30:	fa04 f403 	lsl.w	r4, r4, r3
 8000f34:	d909      	bls.n	8000f4a <__udivmoddi4+0x19a>
 8000f36:	197d      	adds	r5, r7, r5
 8000f38:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f3c:	f080 808f 	bcs.w	800105e <__udivmoddi4+0x2ae>
 8000f40:	45ac      	cmp	ip, r5
 8000f42:	f240 808c 	bls.w	800105e <__udivmoddi4+0x2ae>
 8000f46:	3802      	subs	r0, #2
 8000f48:	443d      	add	r5, r7
 8000f4a:	eba5 050c 	sub.w	r5, r5, ip
 8000f4e:	fbb5 f1fe 	udiv	r1, r5, lr
 8000f52:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000f56:	fb01 f908 	mul.w	r9, r1, r8
 8000f5a:	b295      	uxth	r5, r2
 8000f5c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000f60:	45a9      	cmp	r9, r5
 8000f62:	d907      	bls.n	8000f74 <__udivmoddi4+0x1c4>
 8000f64:	197d      	adds	r5, r7, r5
 8000f66:	f101 32ff 	add.w	r2, r1, #4294967295
 8000f6a:	d274      	bcs.n	8001056 <__udivmoddi4+0x2a6>
 8000f6c:	45a9      	cmp	r9, r5
 8000f6e:	d972      	bls.n	8001056 <__udivmoddi4+0x2a6>
 8000f70:	3902      	subs	r1, #2
 8000f72:	443d      	add	r5, r7
 8000f74:	eba5 0509 	sub.w	r5, r5, r9
 8000f78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f7c:	e778      	b.n	8000e70 <__udivmoddi4+0xc0>
 8000f7e:	f1c1 0720 	rsb	r7, r1, #32
 8000f82:	408b      	lsls	r3, r1
 8000f84:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f88:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f8c:	fa25 f407 	lsr.w	r4, r5, r7
 8000f90:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000f94:	fbb4 f9fe 	udiv	r9, r4, lr
 8000f98:	fa1f f88c 	uxth.w	r8, ip
 8000f9c:	fb0e 4419 	mls	r4, lr, r9, r4
 8000fa0:	fa20 f307 	lsr.w	r3, r0, r7
 8000fa4:	fb09 fa08 	mul.w	sl, r9, r8
 8000fa8:	408d      	lsls	r5, r1
 8000faa:	431d      	orrs	r5, r3
 8000fac:	0c2b      	lsrs	r3, r5, #16
 8000fae:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000fb2:	45a2      	cmp	sl, r4
 8000fb4:	fa02 f201 	lsl.w	r2, r2, r1
 8000fb8:	fa00 f301 	lsl.w	r3, r0, r1
 8000fbc:	d909      	bls.n	8000fd2 <__udivmoddi4+0x222>
 8000fbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000fc2:	f109 30ff 	add.w	r0, r9, #4294967295
 8000fc6:	d248      	bcs.n	800105a <__udivmoddi4+0x2aa>
 8000fc8:	45a2      	cmp	sl, r4
 8000fca:	d946      	bls.n	800105a <__udivmoddi4+0x2aa>
 8000fcc:	f1a9 0902 	sub.w	r9, r9, #2
 8000fd0:	4464      	add	r4, ip
 8000fd2:	eba4 040a 	sub.w	r4, r4, sl
 8000fd6:	fbb4 f0fe 	udiv	r0, r4, lr
 8000fda:	fb0e 4410 	mls	r4, lr, r0, r4
 8000fde:	fb00 fa08 	mul.w	sl, r0, r8
 8000fe2:	b2ad      	uxth	r5, r5
 8000fe4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fe8:	45a2      	cmp	sl, r4
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x24e>
 8000fec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ff0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ff4:	d22d      	bcs.n	8001052 <__udivmoddi4+0x2a2>
 8000ff6:	45a2      	cmp	sl, r4
 8000ff8:	d92b      	bls.n	8001052 <__udivmoddi4+0x2a2>
 8000ffa:	3802      	subs	r0, #2
 8000ffc:	4464      	add	r4, ip
 8000ffe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001002:	fba0 8902 	umull	r8, r9, r0, r2
 8001006:	eba4 040a 	sub.w	r4, r4, sl
 800100a:	454c      	cmp	r4, r9
 800100c:	46c6      	mov	lr, r8
 800100e:	464d      	mov	r5, r9
 8001010:	d319      	bcc.n	8001046 <__udivmoddi4+0x296>
 8001012:	d016      	beq.n	8001042 <__udivmoddi4+0x292>
 8001014:	b15e      	cbz	r6, 800102e <__udivmoddi4+0x27e>
 8001016:	ebb3 020e 	subs.w	r2, r3, lr
 800101a:	eb64 0405 	sbc.w	r4, r4, r5
 800101e:	fa04 f707 	lsl.w	r7, r4, r7
 8001022:	fa22 f301 	lsr.w	r3, r2, r1
 8001026:	431f      	orrs	r7, r3
 8001028:	40cc      	lsrs	r4, r1
 800102a:	e9c6 7400 	strd	r7, r4, [r6]
 800102e:	2100      	movs	r1, #0
 8001030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001034:	4631      	mov	r1, r6
 8001036:	4630      	mov	r0, r6
 8001038:	e70c      	b.n	8000e54 <__udivmoddi4+0xa4>
 800103a:	468c      	mov	ip, r1
 800103c:	e6eb      	b.n	8000e16 <__udivmoddi4+0x66>
 800103e:	4610      	mov	r0, r2
 8001040:	e6ff      	b.n	8000e42 <__udivmoddi4+0x92>
 8001042:	4543      	cmp	r3, r8
 8001044:	d2e6      	bcs.n	8001014 <__udivmoddi4+0x264>
 8001046:	ebb8 0e02 	subs.w	lr, r8, r2
 800104a:	eb69 050c 	sbc.w	r5, r9, ip
 800104e:	3801      	subs	r0, #1
 8001050:	e7e0      	b.n	8001014 <__udivmoddi4+0x264>
 8001052:	4628      	mov	r0, r5
 8001054:	e7d3      	b.n	8000ffe <__udivmoddi4+0x24e>
 8001056:	4611      	mov	r1, r2
 8001058:	e78c      	b.n	8000f74 <__udivmoddi4+0x1c4>
 800105a:	4681      	mov	r9, r0
 800105c:	e7b9      	b.n	8000fd2 <__udivmoddi4+0x222>
 800105e:	4608      	mov	r0, r1
 8001060:	e773      	b.n	8000f4a <__udivmoddi4+0x19a>
 8001062:	4608      	mov	r0, r1
 8001064:	e749      	b.n	8000efa <__udivmoddi4+0x14a>
 8001066:	f1ac 0c02 	sub.w	ip, ip, #2
 800106a:	443d      	add	r5, r7
 800106c:	e713      	b.n	8000e96 <__udivmoddi4+0xe6>
 800106e:	3802      	subs	r0, #2
 8001070:	443c      	add	r4, r7
 8001072:	e724      	b.n	8000ebe <__udivmoddi4+0x10e>

08001074 <__aeabi_idiv0>:
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <SHT31_readData>:
}
/*------------------------------------------------------------------------*/
/*------------------------------------------------------------------------*/
// fonction de mesure de la temperature et humidit�
SHT31_data_t SHT31_readData(I2C_HandleTypeDef* hi2c)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	; 0x28
 800107c:	af02      	add	r7, sp, #8
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
	uint8_t dataraw[6];
	uint16_t Traw, Hraw;
	SHT31_data_t data;

	// SSM_CS_HIGH : Measurement Commands with a high repeatability measurement with clock stretching enabled
	dataraw[0] =  (SSM_CS_HIGH >>8) & 0xFF;  // adresse du registre
 8001082:	232c      	movs	r3, #44	; 0x2c
 8001084:	753b      	strb	r3, [r7, #20]
	dataraw[1] = SSM_CS_HIGH & 0xFF;			// la commande
 8001086:	2306      	movs	r3, #6
 8001088:	757b      	strb	r3, [r7, #21]

	// envoi de l'adresse du registre et de la commande
	HAL_I2C_Master_Transmit(hi2c,SHT31_Address<<1,(uint8_t *)dataraw,2,1000);
 800108a:	f107 0214 	add.w	r2, r7, #20
 800108e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2302      	movs	r3, #2
 8001096:	2188      	movs	r1, #136	; 0x88
 8001098:	6838      	ldr	r0, [r7, #0]
 800109a:	f001 f907 	bl	80022ac <HAL_I2C_Master_Transmit>

	// reception des donn�e lues par le capteur
	HAL_I2C_Master_Receive(hi2c,SHT31_Address<<1,(uint8_t *)dataraw,6,1000);
 800109e:	f107 0214 	add.w	r2, r7, #20
 80010a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2306      	movs	r3, #6
 80010aa:	2188      	movs	r1, #136	; 0x88
 80010ac:	6838      	ldr	r0, [r7, #0]
 80010ae:	f001 f9fb 	bl	80024a8 <HAL_I2C_Master_Receive>

	// donn�e de mesure sur 16 bit
	Traw = (((uint16_t)dataraw[0]) << 8) | dataraw[1];  //  concat�nation des deux donn�es de la temperature
 80010b2:	7d3b      	ldrb	r3, [r7, #20]
 80010b4:	021b      	lsls	r3, r3, #8
 80010b6:	b21a      	sxth	r2, r3
 80010b8:	7d7b      	ldrb	r3, [r7, #21]
 80010ba:	b21b      	sxth	r3, r3
 80010bc:	4313      	orrs	r3, r2
 80010be:	b21b      	sxth	r3, r3
 80010c0:	83fb      	strh	r3, [r7, #30]
	Hraw = (((uint16_t)dataraw[3]) << 8) | dataraw[4];  //  concat�nation des deux donn�es de l'humidit�e
 80010c2:	7dfb      	ldrb	r3, [r7, #23]
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	7e3b      	ldrb	r3, [r7, #24]
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	4313      	orrs	r3, r2
 80010ce:	b21b      	sxth	r3, r3
 80010d0:	83bb      	strh	r3, [r7, #28]

	// conversion du signal de sortie du capteur vers des valeurs physique
	data.T = -45 + 175.0 *Traw / 65535.0;
 80010d2:	8bfb      	ldrh	r3, [r7, #30]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fa59 	bl	800058c <__aeabi_i2d>
 80010da:	a323      	add	r3, pc, #140	; (adr r3, 8001168 <SHT31_readData+0xf0>)
 80010dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e0:	f7ff fabe 	bl	8000660 <__aeabi_dmul>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4610      	mov	r0, r2
 80010ea:	4619      	mov	r1, r3
 80010ec:	a320      	add	r3, pc, #128	; (adr r3, 8001170 <SHT31_readData+0xf8>)
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	f7ff fbdf 	bl	80008b4 <__aeabi_ddiv>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4610      	mov	r0, r2
 80010fc:	4619      	mov	r1, r3
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <SHT31_readData+0x100>)
 8001104:	f7ff f8f4 	bl	80002f0 <__aeabi_dsub>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4610      	mov	r0, r2
 800110e:	4619      	mov	r1, r3
 8001110:	f7ff fcb8 	bl	8000a84 <__aeabi_d2f>
 8001114:	4603      	mov	r3, r0
 8001116:	60fb      	str	r3, [r7, #12]
	data.H = 100.0 * Hraw / 65535.0;
 8001118:	8bbb      	ldrh	r3, [r7, #28]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fa36 	bl	800058c <__aeabi_i2d>
 8001120:	f04f 0200 	mov.w	r2, #0
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <SHT31_readData+0x104>)
 8001126:	f7ff fa9b 	bl	8000660 <__aeabi_dmul>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4610      	mov	r0, r2
 8001130:	4619      	mov	r1, r3
 8001132:	a30f      	add	r3, pc, #60	; (adr r3, 8001170 <SHT31_readData+0xf8>)
 8001134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001138:	f7ff fbbc 	bl	80008b4 <__aeabi_ddiv>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4610      	mov	r0, r2
 8001142:	4619      	mov	r1, r3
 8001144:	f7ff fc9e 	bl	8000a84 <__aeabi_d2f>
 8001148:	4603      	mov	r3, r0
 800114a:	613b      	str	r3, [r7, #16]

	return data;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	461a      	mov	r2, r3
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001158:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	3720      	adds	r7, #32
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	f3af 8000 	nop.w
 8001168:	00000000 	.word	0x00000000
 800116c:	4065e000 	.word	0x4065e000
 8001170:	00000000 	.word	0x00000000
 8001174:	40efffe0 	.word	0x40efffe0
 8001178:	40468000 	.word	0x40468000
 800117c:	40590000 	.word	0x40590000

08001180 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	; 0x28
 8001184:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
 8001194:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001196:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <MX_GPIO_Init+0xc0>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	4a29      	ldr	r2, [pc, #164]	; (8001240 <MX_GPIO_Init+0xc0>)
 800119c:	f043 0304 	orr.w	r3, r3, #4
 80011a0:	61d3      	str	r3, [r2, #28]
 80011a2:	4b27      	ldr	r3, [pc, #156]	; (8001240 <MX_GPIO_Init+0xc0>)
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	f003 0304 	and.w	r3, r3, #4
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ae:	4b24      	ldr	r3, [pc, #144]	; (8001240 <MX_GPIO_Init+0xc0>)
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	4a23      	ldr	r2, [pc, #140]	; (8001240 <MX_GPIO_Init+0xc0>)
 80011b4:	f043 0320 	orr.w	r3, r3, #32
 80011b8:	61d3      	str	r3, [r2, #28]
 80011ba:	4b21      	ldr	r3, [pc, #132]	; (8001240 <MX_GPIO_Init+0xc0>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	f003 0320 	and.w	r3, r3, #32
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <MX_GPIO_Init+0xc0>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	4a1d      	ldr	r2, [pc, #116]	; (8001240 <MX_GPIO_Init+0xc0>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	61d3      	str	r3, [r2, #28]
 80011d2:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <MX_GPIO_Init+0xc0>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011de:	4b18      	ldr	r3, [pc, #96]	; (8001240 <MX_GPIO_Init+0xc0>)
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	4a17      	ldr	r2, [pc, #92]	; (8001240 <MX_GPIO_Init+0xc0>)
 80011e4:	f043 0302 	orr.w	r3, r3, #2
 80011e8:	61d3      	str	r3, [r2, #28]
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <MX_GPIO_Init+0xc0>)
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2120      	movs	r1, #32
 80011fa:	4812      	ldr	r0, [pc, #72]	; (8001244 <MX_GPIO_Init+0xc4>)
 80011fc:	f000 fefa 	bl	8001ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001200:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <MX_GPIO_Init+0xc8>)
 8001208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	4619      	mov	r1, r3
 8001214:	480d      	ldr	r0, [pc, #52]	; (800124c <MX_GPIO_Init+0xcc>)
 8001216:	f000 fd5d 	bl	8001cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800121a:	2320      	movs	r3, #32
 800121c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121e:	2301      	movs	r3, #1
 8001220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	4619      	mov	r1, r3
 8001230:	4804      	ldr	r0, [pc, #16]	; (8001244 <MX_GPIO_Init+0xc4>)
 8001232:	f000 fd4f 	bl	8001cd4 <HAL_GPIO_Init>

}
 8001236:	bf00      	nop
 8001238:	3728      	adds	r7, #40	; 0x28
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800
 8001244:	40020000 	.word	0x40020000
 8001248:	10110000 	.word	0x10110000
 800124c:	40020800 	.word	0x40020800

08001250 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <MX_I2C1_Init+0x50>)
 8001256:	4a13      	ldr	r2, [pc, #76]	; (80012a4 <MX_I2C1_Init+0x54>)
 8001258:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <MX_I2C1_Init+0x50>)
 800125c:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <MX_I2C1_Init+0x58>)
 800125e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <MX_I2C1_Init+0x50>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <MX_I2C1_Init+0x50>)
 8001268:	2200      	movs	r2, #0
 800126a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <MX_I2C1_Init+0x50>)
 800126e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001272:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001274:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <MX_I2C1_Init+0x50>)
 8001276:	2200      	movs	r2, #0
 8001278:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <MX_I2C1_Init+0x50>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001280:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <MX_I2C1_Init+0x50>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <MX_I2C1_Init+0x50>)
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800128c:	4804      	ldr	r0, [pc, #16]	; (80012a0 <MX_I2C1_Init+0x50>)
 800128e:	f000 fec9 	bl	8002024 <HAL_I2C_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001298:	f000 fa74 	bl	8001784 <Error_Handler>
  }

}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000098 	.word	0x20000098
 80012a4:	40005400 	.word	0x40005400
 80012a8:	000186a0 	.word	0x000186a0

080012ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a17      	ldr	r2, [pc, #92]	; (8001328 <HAL_I2C_MspInit+0x7c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d128      	bne.n	8001320 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ce:	4b17      	ldr	r3, [pc, #92]	; (800132c <HAL_I2C_MspInit+0x80>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	4a16      	ldr	r2, [pc, #88]	; (800132c <HAL_I2C_MspInit+0x80>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	61d3      	str	r3, [r2, #28]
 80012da:	4b14      	ldr	r3, [pc, #80]	; (800132c <HAL_I2C_MspInit+0x80>)
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ec:	2312      	movs	r3, #18
 80012ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f0:	2301      	movs	r3, #1
 80012f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f4:	2303      	movs	r3, #3
 80012f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012f8:	2304      	movs	r3, #4
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4619      	mov	r1, r3
 8001302:	480b      	ldr	r0, [pc, #44]	; (8001330 <HAL_I2C_MspInit+0x84>)
 8001304:	f000 fce6 	bl	8001cd4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <HAL_I2C_MspInit+0x80>)
 800130a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130c:	4a07      	ldr	r2, [pc, #28]	; (800132c <HAL_I2C_MspInit+0x80>)
 800130e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001312:	6253      	str	r3, [r2, #36]	; 0x24
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <HAL_I2C_MspInit+0x80>)
 8001316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001320:	bf00      	nop
 8001322:	3728      	adds	r7, #40	; 0x28
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40005400 	.word	0x40005400
 800132c:	40023800 	.word	0x40023800
 8001330:	40020400 	.word	0x40020400

08001334 <lcd_init>:
#include "i2c.h"


/* Fonction qui permet d'initialiser l'ecran LCD */
void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af02      	add	r7, sp, #8
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	617b      	str	r3, [r7, #20]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES et 5x10points
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	f043 030c 	orr.w	r3, r3, #12
 800134a:	b2da      	uxtb	r2, r3
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	743b      	strb	r3, [r7, #16]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	f043 0320 	orr.w	r3, r3, #32
 800135c:	b2db      	uxtb	r3, r3
 800135e:	747b      	strb	r3, [r7, #17]

	HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 8001360:	2364      	movs	r3, #100	; 0x64
 8001362:	2205      	movs	r2, #5
 8001364:	217c      	movs	r1, #124	; 0x7c
 8001366:	6978      	ldr	r0, [r7, #20]
 8001368:	f001 fac4 	bl	80028f4 <HAL_I2C_IsDeviceReady>
	HAL_Delay(50);
 800136c:	2032      	movs	r0, #50	; 0x32
 800136e:	f000 fbab 	bl	8001ac8 <HAL_Delay>

    HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 8001372:	f107 0210 	add.w	r2, r7, #16
 8001376:	f241 3388 	movw	r3, #5000	; 0x1388
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	2302      	movs	r3, #2
 800137e:	217c      	movs	r1, #124	; 0x7c
 8001380:	6978      	ldr	r0, [r7, #20]
 8001382:	f000 ff93 	bl	80022ac <HAL_I2C_Master_Transmit>
	HAL_Delay(50);
 8001386:	2032      	movs	r0, #50	; 0x32
 8001388:	f000 fb9e 	bl	8001ac8 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 800138c:	f107 0210 	add.w	r2, r7, #16
 8001390:	f241 3388 	movw	r3, #5000	; 0x1388
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	2302      	movs	r3, #2
 8001398:	217c      	movs	r1, #124	; 0x7c
 800139a:	6978      	ldr	r0, [r7, #20]
 800139c:	f000 ff86 	bl	80022ac <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80013a0:	2005      	movs	r0, #5
 80013a2:	f000 fb91 	bl	8001ac8 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 80013a6:	f107 0210 	add.w	r2, r7, #16
 80013aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	2302      	movs	r3, #2
 80013b2:	217c      	movs	r1, #124	; 0x7c
 80013b4:	6978      	ldr	r0, [r7, #20]
 80013b6:	f000 ff79 	bl	80022ac <HAL_I2C_Master_Transmit>

	// CONTROL -> Affichage ON, Curseur OFF & Blink OFF
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	2204      	movs	r2, #4
 80013be:	705a      	strb	r2, [r3, #1]
    // On applique le masque de displaycontrol
	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	785b      	ldrb	r3, [r3, #1]
 80013c4:	f043 0308 	orr.w	r3, r3, #8
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	747b      	strb	r3, [r7, #17]
	// On envoie au lcd les registres de configuration a modifier 
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 80013cc:	f107 0210 	add.w	r2, r7, #16
 80013d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	2302      	movs	r3, #2
 80013d8:	217c      	movs	r1, #124	; 0x7c
 80013da:	6978      	ldr	r0, [r7, #20]
 80013dc:	f000 ff66 	bl	80022ac <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY; // On efface ce qui est affiche sur l'ecran
 80013e0:	2301      	movs	r3, #1
 80013e2:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 80013e4:	f107 0210 	add.w	r2, r7, #16
 80013e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	2302      	movs	r3, #2
 80013f0:	217c      	movs	r1, #124	; 0x7c
 80013f2:	6978      	ldr	r0, [r7, #20]
 80013f4:	f000 ff5a 	bl	80022ac <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 80013f8:	2002      	movs	r0, #2
 80013fa:	f000 fb65 	bl	8001ac8 <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	2202      	movs	r2, #2
 8001402:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	789b      	ldrb	r3, [r3, #2]
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	b2db      	uxtb	r3, r3
 800140e:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8001410:	f107 0210 	add.w	r2, r7, #16
 8001414:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	2302      	movs	r3, #2
 800141c:	217c      	movs	r1, #124	; 0x7c
 800141e:	6978      	ldr	r0, [r7, #20]
 8001420:	f000 ff44 	bl	80022ac <HAL_I2C_Master_Transmit>

	// BACKLIGHT INIT
	uint8_t data_backlight[2];
	data_backlight[0] = REG_MODE1;
 8001424:	2300      	movs	r3, #0
 8001426:	733b      	strb	r3, [r7, #12]
	data_backlight[1] = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800142c:	f107 020c 	add.w	r2, r7, #12
 8001430:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	2302      	movs	r3, #2
 8001438:	21c4      	movs	r1, #196	; 0xc4
 800143a:	6978      	ldr	r0, [r7, #20]
 800143c:	f000 ff36 	bl	80022ac <HAL_I2C_Master_Transmit>

	data_backlight[0] = REG_OUTPUT;
 8001440:	2308      	movs	r3, #8
 8001442:	733b      	strb	r3, [r7, #12]
	data_backlight[1] = 0xFF;
 8001444:	23ff      	movs	r3, #255	; 0xff
 8001446:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001448:	f107 020c 	add.w	r2, r7, #12
 800144c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	2302      	movs	r3, #2
 8001454:	21c4      	movs	r1, #196	; 0xc4
 8001456:	6978      	ldr	r0, [r7, #20]
 8001458:	f000 ff28 	bl	80022ac <HAL_I2C_Master_Transmit>

	data_backlight[0] = REG_MODE2;
 800145c:	2301      	movs	r3, #1
 800145e:	733b      	strb	r3, [r7, #12]
	data_backlight[1] = 0x20;
 8001460:	2320      	movs	r3, #32
 8001462:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001464:	f107 020c 	add.w	r2, r7, #12
 8001468:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	2302      	movs	r3, #2
 8001470:	21c4      	movs	r1, #196	; 0xc4
 8001472:	6978      	ldr	r0, [r7, #20]
 8001474:	f000 ff1a 	bl	80022ac <HAL_I2C_Master_Transmit>

	// RGB WHITE
	// On utilise l'adresse RGB_ADDRESS pour configurer le retroeclairage
	uint8_t data_rgb[2];
	data_rgb[0] = REG_RED;
 8001478:	2304      	movs	r3, #4
 800147a:	723b      	strb	r3, [r7, #8]
	data_rgb[1] = 255;
 800147c:	23ff      	movs	r3, #255	; 0xff
 800147e:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8001480:	f107 0208 	add.w	r2, r7, #8
 8001484:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	2302      	movs	r3, #2
 800148c:	21c4      	movs	r1, #196	; 0xc4
 800148e:	6978      	ldr	r0, [r7, #20]
 8001490:	f000 ff0c 	bl	80022ac <HAL_I2C_Master_Transmit>

	data_rgb[0] = REG_GREEN;
 8001494:	2303      	movs	r3, #3
 8001496:	723b      	strb	r3, [r7, #8]
	data_rgb[1] = 255;
 8001498:	23ff      	movs	r3, #255	; 0xff
 800149a:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800149c:	f107 0208 	add.w	r2, r7, #8
 80014a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	2302      	movs	r3, #2
 80014a8:	21c4      	movs	r1, #196	; 0xc4
 80014aa:	6978      	ldr	r0, [r7, #20]
 80014ac:	f000 fefe 	bl	80022ac <HAL_I2C_Master_Transmit>

	data_rgb[0] = REG_BLUE;
 80014b0:	2302      	movs	r3, #2
 80014b2:	723b      	strb	r3, [r7, #8]
	data_rgb[1] = 255;
 80014b4:	23ff      	movs	r3, #255	; 0xff
 80014b6:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80014b8:	f107 0208 	add.w	r2, r7, #8
 80014bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	2302      	movs	r3, #2
 80014c4:	21c4      	movs	r1, #196	; 0xc4
 80014c6:	6978      	ldr	r0, [r7, #20]
 80014c8:	f000 fef0 	bl	80022ac <HAL_I2C_Master_Transmit>

}
 80014cc:	bf00      	nop
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <lcd_print>:
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

/* Fonction qui permet d'afficher une chaine de caracteres sur l'ecran LCD */
void lcd_print(char *str)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af02      	add	r7, sp, #8
 80014da:	6078      	str	r0, [r7, #4]
	//I2C_HandleTypeDef* Handle = I2Cx;
    char data[2];
    data[0] = 0x40;
 80014dc:	2340      	movs	r3, #64	; 0x40
 80014de:	723b      	strb	r3, [r7, #8]
    int i=0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60fb      	str	r3, [r7, #12]
    while(str[i] != '\0')
 80014e4:	e011      	b.n	800150a <lcd_print+0x36>
    {
            data[1] = str[i];
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	4413      	add	r3, r2
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	727b      	strb	r3, [r7, #9]
            HAL_I2C_Master_Transmit(&hi2c1,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 80014f0:	f107 0208 	add.w	r2, r7, #8
 80014f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	2302      	movs	r3, #2
 80014fc:	217c      	movs	r1, #124	; 0x7c
 80014fe:	4808      	ldr	r0, [pc, #32]	; (8001520 <lcd_print+0x4c>)
 8001500:	f000 fed4 	bl	80022ac <HAL_I2C_Master_Transmit>
            i++;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	3301      	adds	r3, #1
 8001508:	60fb      	str	r3, [r7, #12]
    while(str[i] != '\0')
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	4413      	add	r3, r2
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1e7      	bne.n	80014e6 <lcd_print+0x12>
   }
}
 8001516:	bf00      	nop
 8001518:	bf00      	nop
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000098 	.word	0x20000098

08001524 <lcd_locate>:
/* Fonction qui permet de positionner le curseur */
void lcd_locate(I2C_HandleTypeDef* I2Cx,char col, char row)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af02      	add	r7, sp, #8
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	70fb      	strb	r3, [r7, #3]
 8001530:	4613      	mov	r3, r2
 8001532:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 8001538:	78bb      	ldrb	r3, [r7, #2]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d104      	bne.n	8001548 <lcd_locate+0x24>
    {
        col = col | 0x80;
 800153e:	78fb      	ldrb	r3, [r7, #3]
 8001540:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001544:	70fb      	strb	r3, [r7, #3]
 8001546:	e003      	b.n	8001550 <lcd_locate+0x2c>
    }
    else
    {
        col = col | 0xc0;
 8001548:	78fb      	ldrb	r3, [r7, #3]
 800154a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800154e:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 8001550:	2380      	movs	r3, #128	; 0x80
 8001552:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 8001554:	78fb      	ldrb	r3, [r7, #3]
 8001556:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001558:	f107 0208 	add.w	r2, r7, #8
 800155c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	2302      	movs	r3, #2
 8001564:	217c      	movs	r1, #124	; 0x7c
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f000 fea0 	bl	80022ac <HAL_I2C_Master_Transmit>
}
 800156c:	bf00      	nop
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <lcd_clear>:

/* Fonction qui permet d'effacer l'ecran */
void lcd_clear()
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af02      	add	r7, sp, #8
	uint8_t data[2];
	data[0] = 0x80;
 800157a:	2380      	movs	r3, #128	; 0x80
 800157c:	713b      	strb	r3, [r7, #4]
	data[1] = LCD_CLEARDISPLAY; // On efface ce qui est affiche sur l'ecran
 800157e:	2301      	movs	r3, #1
 8001580:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8001582:	1d3a      	adds	r2, r7, #4
 8001584:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	2302      	movs	r3, #2
 800158c:	217c      	movs	r1, #124	; 0x7c
 800158e:	4805      	ldr	r0, [pc, #20]	; (80015a4 <lcd_clear+0x30>)
 8001590:	f000 fe8c 	bl	80022ac <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8001594:	2002      	movs	r0, #2
 8001596:	f000 fa97 	bl	8001ac8 <HAL_Delay>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000098 	.word	0x20000098

080015a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a8:	b5b0      	push	{r4, r5, r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ae:	f000 fa1c 	bl	80019ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b2:	f000 f899 	bl	80016e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b6:	f7ff fde3 	bl	8001180 <MX_GPIO_Init>
  MX_I2C1_Init();
 80015ba:	f7ff fe49 	bl	8001250 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80015be:	f000 f981 	bl	80018c4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init(&hi2c1,&DataStruct);
 80015c2:	4940      	ldr	r1, [pc, #256]	; (80016c4 <main+0x11c>)
 80015c4:	4840      	ldr	r0, [pc, #256]	; (80016c8 <main+0x120>)
 80015c6:	f7ff feb5 	bl	8001334 <lcd_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  data=SHT31_readData(&hi2c1); // lecture de la temperature et l'humidite
 80015ca:	4c40      	ldr	r4, [pc, #256]	; (80016cc <main+0x124>)
 80015cc:	463b      	mov	r3, r7
 80015ce:	493e      	ldr	r1, [pc, #248]	; (80016c8 <main+0x120>)
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fd51 	bl	8001078 <SHT31_readData>
 80015d6:	4622      	mov	r2, r4
 80015d8:	463b      	mov	r3, r7
 80015da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015de:	e882 0003 	stmia.w	r2, {r0, r1}

	 	  // affichage de la temperature et l'humidite sur le port serie
	 	  HAL_UART_Transmit(&huart2, (uint8_t *)Data_T, sprintf((char *)Data_T, "Temp: %ld.%ld C ",(uint32_t )(data.T),(uint32_t )((data.T-(uint32_t )(data.T))*10)), 1000);
 80015e2:	4b3a      	ldr	r3, [pc, #232]	; (80016cc <main+0x124>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fbaa 	bl	8000d40 <__aeabi_f2uiz>
 80015ec:	4605      	mov	r5, r0
 80015ee:	4b37      	ldr	r3, [pc, #220]	; (80016cc <main+0x124>)
 80015f0:	681c      	ldr	r4, [r3, #0]
 80015f2:	4b36      	ldr	r3, [pc, #216]	; (80016cc <main+0x124>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fba2 	bl	8000d40 <__aeabi_f2uiz>
 80015fc:	4603      	mov	r3, r0
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fb46 	bl	8000c90 <__aeabi_ui2f>
 8001604:	4603      	mov	r3, r0
 8001606:	4619      	mov	r1, r3
 8001608:	4620      	mov	r0, r4
 800160a:	f7ff fa8f 	bl	8000b2c <__aeabi_fsub>
 800160e:	4603      	mov	r3, r0
 8001610:	492f      	ldr	r1, [pc, #188]	; (80016d0 <main+0x128>)
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe fdb4 	bl	8000180 <__aeabi_fmul>
 8001618:	4603      	mov	r3, r0
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fb90 	bl	8000d40 <__aeabi_f2uiz>
 8001620:	4603      	mov	r3, r0
 8001622:	462a      	mov	r2, r5
 8001624:	492b      	ldr	r1, [pc, #172]	; (80016d4 <main+0x12c>)
 8001626:	482c      	ldr	r0, [pc, #176]	; (80016d8 <main+0x130>)
 8001628:	f002 fdc8 	bl	80041bc <siprintf>
 800162c:	4603      	mov	r3, r0
 800162e:	b29a      	uxth	r2, r3
 8001630:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001634:	4928      	ldr	r1, [pc, #160]	; (80016d8 <main+0x130>)
 8001636:	4829      	ldr	r0, [pc, #164]	; (80016dc <main+0x134>)
 8001638:	f002 fbc7 	bl	8003dca <HAL_UART_Transmit>
	 	  HAL_UART_Transmit(&huart2, (uint8_t *)Data_H, sprintf((char *)Data_H, "Hum : %ld.%ld %% ",(uint32_t )(data.H),(uint32_t )((data.H-(uint32_t )(data.H))*10)), 1000);
 800163c:	4b23      	ldr	r3, [pc, #140]	; (80016cc <main+0x124>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fb7d 	bl	8000d40 <__aeabi_f2uiz>
 8001646:	4605      	mov	r5, r0
 8001648:	4b20      	ldr	r3, [pc, #128]	; (80016cc <main+0x124>)
 800164a:	685c      	ldr	r4, [r3, #4]
 800164c:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <main+0x124>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fb75 	bl	8000d40 <__aeabi_f2uiz>
 8001656:	4603      	mov	r3, r0
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fb19 	bl	8000c90 <__aeabi_ui2f>
 800165e:	4603      	mov	r3, r0
 8001660:	4619      	mov	r1, r3
 8001662:	4620      	mov	r0, r4
 8001664:	f7ff fa62 	bl	8000b2c <__aeabi_fsub>
 8001668:	4603      	mov	r3, r0
 800166a:	4919      	ldr	r1, [pc, #100]	; (80016d0 <main+0x128>)
 800166c:	4618      	mov	r0, r3
 800166e:	f7fe fd87 	bl	8000180 <__aeabi_fmul>
 8001672:	4603      	mov	r3, r0
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fb63 	bl	8000d40 <__aeabi_f2uiz>
 800167a:	4603      	mov	r3, r0
 800167c:	462a      	mov	r2, r5
 800167e:	4918      	ldr	r1, [pc, #96]	; (80016e0 <main+0x138>)
 8001680:	4818      	ldr	r0, [pc, #96]	; (80016e4 <main+0x13c>)
 8001682:	f002 fd9b 	bl	80041bc <siprintf>
 8001686:	4603      	mov	r3, r0
 8001688:	b29a      	uxth	r2, r3
 800168a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168e:	4915      	ldr	r1, [pc, #84]	; (80016e4 <main+0x13c>)
 8001690:	4812      	ldr	r0, [pc, #72]	; (80016dc <main+0x134>)
 8001692:	f002 fb9a 	bl	8003dca <HAL_UART_Transmit>

	       lcd_clear();
 8001696:	f7ff ff6d 	bl	8001574 <lcd_clear>
	       // affichage de la temperature sur l'ecran lcd
	 	  lcd_locate(&hi2c1,0,0);
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	480a      	ldr	r0, [pc, #40]	; (80016c8 <main+0x120>)
 80016a0:	f7ff ff40 	bl	8001524 <lcd_locate>
	 	  lcd_print((char *)Data_T);
 80016a4:	480c      	ldr	r0, [pc, #48]	; (80016d8 <main+0x130>)
 80016a6:	f7ff ff15 	bl	80014d4 <lcd_print>
	 	  // affichage de l'humidite sur l'ecran lcd
	 	  lcd_locate(&hi2c1,0,1);
 80016aa:	2201      	movs	r2, #1
 80016ac:	2100      	movs	r1, #0
 80016ae:	4806      	ldr	r0, [pc, #24]	; (80016c8 <main+0x120>)
 80016b0:	f7ff ff38 	bl	8001524 <lcd_locate>
	 	  lcd_print((char *)Data_H);
 80016b4:	480b      	ldr	r0, [pc, #44]	; (80016e4 <main+0x13c>)
 80016b6:	f7ff ff0d 	bl	80014d4 <lcd_print>

	       HAL_Delay(2000);  // delay de 2s
 80016ba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016be:	f000 fa03 	bl	8001ac8 <HAL_Delay>
	  data=SHT31_readData(&hi2c1); // lecture de la temperature et l'humidite
 80016c2:	e782      	b.n	80015ca <main+0x22>
 80016c4:	200001ec 	.word	0x200001ec
 80016c8:	20000098 	.word	0x20000098
 80016cc:	200002f0 	.word	0x200002f0
 80016d0:	41200000 	.word	0x41200000
 80016d4:	08004a48 	.word	0x08004a48
 80016d8:	200000ec 	.word	0x200000ec
 80016dc:	200002f8 	.word	0x200002f8
 80016e0:	08004a5c 	.word	0x08004a5c
 80016e4:	200001f0 	.word	0x200001f0

080016e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b092      	sub	sp, #72	; 0x48
 80016ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	2234      	movs	r2, #52	; 0x34
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f002 fd58 	bl	80041ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016fc:	463b      	mov	r3, r7
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
 8001708:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800170a:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <SystemClock_Config+0x98>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001712:	4a1b      	ldr	r2, [pc, #108]	; (8001780 <SystemClock_Config+0x98>)
 8001714:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001718:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800171a:	2302      	movs	r3, #2
 800171c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800171e:	2301      	movs	r3, #1
 8001720:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001722:	2310      	movs	r3, #16
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001726:	2302      	movs	r3, #2
 8001728:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800172a:	2300      	movs	r3, #0
 800172c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800172e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001734:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001738:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	4618      	mov	r0, r3
 8001740:	f001 fd32 	bl	80031a8 <HAL_RCC_OscConfig>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800174a:	f000 f81b 	bl	8001784 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800174e:	230f      	movs	r3, #15
 8001750:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001752:	2303      	movs	r3, #3
 8001754:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001762:	463b      	mov	r3, r7
 8001764:	2101      	movs	r1, #1
 8001766:	4618      	mov	r0, r3
 8001768:	f002 f84e 	bl	8003808 <HAL_RCC_ClockConfig>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001772:	f000 f807 	bl	8001784 <Error_Handler>
  }
}
 8001776:	bf00      	nop
 8001778:	3748      	adds	r7, #72	; 0x48
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40007000 	.word	0x40007000

08001784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001788:	b672      	cpsid	i
}
 800178a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800178c:	e7fe      	b.n	800178c <Error_Handler+0x8>
	...

08001790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <HAL_MspInit+0x5c>)
 8001798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179a:	4a14      	ldr	r2, [pc, #80]	; (80017ec <HAL_MspInit+0x5c>)
 800179c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80017a0:	6253      	str	r3, [r2, #36]	; 0x24
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_MspInit+0x5c>)
 80017a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ae:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <HAL_MspInit+0x5c>)
 80017b0:	6a1b      	ldr	r3, [r3, #32]
 80017b2:	4a0e      	ldr	r2, [pc, #56]	; (80017ec <HAL_MspInit+0x5c>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6213      	str	r3, [r2, #32]
 80017ba:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <HAL_MspInit+0x5c>)
 80017bc:	6a1b      	ldr	r3, [r3, #32]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <HAL_MspInit+0x5c>)
 80017c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ca:	4a08      	ldr	r2, [pc, #32]	; (80017ec <HAL_MspInit+0x5c>)
 80017cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d0:	6253      	str	r3, [r2, #36]	; 0x24
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_MspInit+0x5c>)
 80017d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017de:	2007      	movs	r0, #7
 80017e0:	f000 fa44 	bl	8001c6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e4:	bf00      	nop
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40023800 	.word	0x40023800

080017f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <NMI_Handler+0x4>

080017f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fa:	e7fe      	b.n	80017fa <HardFault_Handler+0x4>

080017fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <MemManage_Handler+0x4>

08001802 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001806:	e7fe      	b.n	8001806 <BusFault_Handler+0x4>

08001808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800180c:	e7fe      	b.n	800180c <UsageFault_Handler+0x4>

0800180e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr

0800181a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr

08001826 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr

08001832 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001836:	f000 f92b 	bl	8001a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001848:	4a14      	ldr	r2, [pc, #80]	; (800189c <_sbrk+0x5c>)
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <_sbrk+0x60>)
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001854:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <_sbrk+0x64>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d102      	bne.n	8001862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <_sbrk+0x64>)
 800185e:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <_sbrk+0x68>)
 8001860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	429a      	cmp	r2, r3
 800186e:	d207      	bcs.n	8001880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001870:	f002 fc72 	bl	8004158 <__errno>
 8001874:	4603      	mov	r3, r0
 8001876:	220c      	movs	r2, #12
 8001878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800187a:	f04f 33ff 	mov.w	r3, #4294967295
 800187e:	e009      	b.n	8001894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <_sbrk+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001886:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <_sbrk+0x64>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <_sbrk+0x64>)
 8001890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001892:	68fb      	ldr	r3, [r7, #12]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20014000 	.word	0x20014000
 80018a0:	00000400 	.word	0x00000400
 80018a4:	2000008c 	.word	0x2000008c
 80018a8:	20000350 	.word	0x20000350

080018ac <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80018b0:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <SystemInit+0x14>)
 80018b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018b6:	609a      	str	r2, [r3, #8]
#endif
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <MX_USART2_UART_Init+0x4c>)
 80018ca:	4a12      	ldr	r2, [pc, #72]	; (8001914 <MX_USART2_UART_Init+0x50>)
 80018cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <MX_USART2_UART_Init+0x4c>)
 80018d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <MX_USART2_UART_Init+0x4c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <MX_USART2_UART_Init+0x4c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018e2:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <MX_USART2_UART_Init+0x4c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018e8:	4b09      	ldr	r3, [pc, #36]	; (8001910 <MX_USART2_UART_Init+0x4c>)
 80018ea:	220c      	movs	r2, #12
 80018ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <MX_USART2_UART_Init+0x4c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <MX_USART2_UART_Init+0x4c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018fa:	4805      	ldr	r0, [pc, #20]	; (8001910 <MX_USART2_UART_Init+0x4c>)
 80018fc:	f002 fa18 	bl	8003d30 <HAL_UART_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001906:	f7ff ff3d 	bl	8001784 <Error_Handler>
  }

}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200002f8 	.word	0x200002f8
 8001914:	40004400 	.word	0x40004400

08001918 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	; 0x28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a17      	ldr	r2, [pc, #92]	; (8001994 <HAL_UART_MspInit+0x7c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d127      	bne.n	800198a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800193a:	4b17      	ldr	r3, [pc, #92]	; (8001998 <HAL_UART_MspInit+0x80>)
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	4a16      	ldr	r2, [pc, #88]	; (8001998 <HAL_UART_MspInit+0x80>)
 8001940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001944:	6253      	str	r3, [r2, #36]	; 0x24
 8001946:	4b14      	ldr	r3, [pc, #80]	; (8001998 <HAL_UART_MspInit+0x80>)
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <HAL_UART_MspInit+0x80>)
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	4a10      	ldr	r2, [pc, #64]	; (8001998 <HAL_UART_MspInit+0x80>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	61d3      	str	r3, [r2, #28]
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <HAL_UART_MspInit+0x80>)
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800196a:	230c      	movs	r3, #12
 800196c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001976:	2303      	movs	r3, #3
 8001978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800197a:	2307      	movs	r3, #7
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	4619      	mov	r1, r3
 8001984:	4805      	ldr	r0, [pc, #20]	; (800199c <HAL_UART_MspInit+0x84>)
 8001986:	f000 f9a5 	bl	8001cd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800198a:	bf00      	nop
 800198c:	3728      	adds	r7, #40	; 0x28
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40004400 	.word	0x40004400
 8001998:	40023800 	.word	0x40023800
 800199c:	40020000 	.word	0x40020000

080019a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80019a0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80019a2:	e003      	b.n	80019ac <LoopCopyDataInit>

080019a4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80019a4:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80019a6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80019a8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80019aa:	3104      	adds	r1, #4

080019ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80019ac:	480a      	ldr	r0, [pc, #40]	; (80019d8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80019ae:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80019b0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80019b2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80019b4:	d3f6      	bcc.n	80019a4 <CopyDataInit>
  ldr r2, =_sbss
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80019b8:	e002      	b.n	80019c0 <LoopFillZerobss>

080019ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  str r3, [r2], #4
 80019bc:	f842 3b04 	str.w	r3, [r2], #4

080019c0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80019c2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80019c4:	d3f9      	bcc.n	80019ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019c6:	f7ff ff71 	bl	80018ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ca:	f002 fbcb 	bl	8004164 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019ce:	f7ff fdeb 	bl	80015a8 <main>
  bx lr
 80019d2:	4770      	bx	lr
  ldr r3, =_sidata
 80019d4:	08004ad8 	.word	0x08004ad8
  ldr r0, =_sdata
 80019d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80019dc:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80019e0:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80019e4:	2000034c 	.word	0x2000034c

080019e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019e8:	e7fe      	b.n	80019e8 <ADC1_IRQHandler>

080019ea <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019f0:	2300      	movs	r3, #0
 80019f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f4:	2003      	movs	r0, #3
 80019f6:	f000 f939 	bl	8001c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019fa:	2000      	movs	r0, #0
 80019fc:	f000 f80e 	bl	8001a1c <HAL_InitTick>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d002      	beq.n	8001a0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	71fb      	strb	r3, [r7, #7]
 8001a0a:	e001      	b.n	8001a10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a0c:	f7ff fec0 	bl	8001790 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a10:	79fb      	ldrb	r3, [r7, #7]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a24:	2300      	movs	r3, #0
 8001a26:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a28:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <HAL_InitTick+0x68>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d022      	beq.n	8001a76 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a30:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <HAL_InitTick+0x6c>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <HAL_InitTick+0x68>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a44:	4618      	mov	r0, r3
 8001a46:	f000 f938 	bl	8001cba <HAL_SYSTICK_Config>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d10f      	bne.n	8001a70 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b0f      	cmp	r3, #15
 8001a54:	d809      	bhi.n	8001a6a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a56:	2200      	movs	r2, #0
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a5e:	f000 f910 	bl	8001c82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a62:	4a0a      	ldr	r2, [pc, #40]	; (8001a8c <HAL_InitTick+0x70>)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	e007      	b.n	8001a7a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	73fb      	strb	r3, [r7, #15]
 8001a6e:	e004      	b.n	8001a7a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
 8001a74:	e001      	b.n	8001a7a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000008 	.word	0x20000008
 8001a88:	20000000 	.word	0x20000000
 8001a8c:	20000004 	.word	0x20000004

08001a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <HAL_IncTick+0x1c>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_IncTick+0x20>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	4a03      	ldr	r2, [pc, #12]	; (8001aac <HAL_IncTick+0x1c>)
 8001aa0:	6013      	str	r3, [r2, #0]
}
 8001aa2:	bf00      	nop
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	20000338 	.word	0x20000338
 8001ab0:	20000008 	.word	0x20000008

08001ab4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab8:	4b02      	ldr	r3, [pc, #8]	; (8001ac4 <HAL_GetTick+0x10>)
 8001aba:	681b      	ldr	r3, [r3, #0]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr
 8001ac4:	20000338 	.word	0x20000338

08001ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad0:	f7ff fff0 	bl	8001ab4 <HAL_GetTick>
 8001ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae0:	d004      	beq.n	8001aec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ae2:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <HAL_Delay+0x40>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	4413      	add	r3, r2
 8001aea:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001aec:	bf00      	nop
 8001aee:	f7ff ffe1 	bl	8001ab4 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d8f7      	bhi.n	8001aee <HAL_Delay+0x26>
  {
  }
}
 8001afe:	bf00      	nop
 8001b00:	bf00      	nop
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000008 	.word	0x20000008

08001b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <__NVIC_SetPriorityGrouping+0x44>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b3e:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <__NVIC_SetPriorityGrouping+0x44>)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	60d3      	str	r3, [r2, #12]
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b58:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <__NVIC_GetPriorityGrouping+0x18>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	0a1b      	lsrs	r3, r3, #8
 8001b5e:	f003 0307 	and.w	r3, r3, #7
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	6039      	str	r1, [r7, #0]
 8001b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	db0a      	blt.n	8001b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	490c      	ldr	r1, [pc, #48]	; (8001bbc <__NVIC_SetPriority+0x4c>)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	0112      	lsls	r2, r2, #4
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	440b      	add	r3, r1
 8001b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b98:	e00a      	b.n	8001bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	4908      	ldr	r1, [pc, #32]	; (8001bc0 <__NVIC_SetPriority+0x50>)
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	3b04      	subs	r3, #4
 8001ba8:	0112      	lsls	r2, r2, #4
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	440b      	add	r3, r1
 8001bae:	761a      	strb	r2, [r3, #24]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000e100 	.word	0xe000e100
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b089      	sub	sp, #36	; 0x24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f1c3 0307 	rsb	r3, r3, #7
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	bf28      	it	cs
 8001be2:	2304      	movcs	r3, #4
 8001be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3304      	adds	r3, #4
 8001bea:	2b06      	cmp	r3, #6
 8001bec:	d902      	bls.n	8001bf4 <NVIC_EncodePriority+0x30>
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3b03      	subs	r3, #3
 8001bf2:	e000      	b.n	8001bf6 <NVIC_EncodePriority+0x32>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43da      	mvns	r2, r3
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	401a      	ands	r2, r3
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	fa01 f303 	lsl.w	r3, r1, r3
 8001c16:	43d9      	mvns	r1, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c1c:	4313      	orrs	r3, r2
         );
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3724      	adds	r7, #36	; 0x24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr

08001c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c38:	d301      	bcc.n	8001c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e00f      	b.n	8001c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <SysTick_Config+0x40>)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c46:	210f      	movs	r1, #15
 8001c48:	f04f 30ff 	mov.w	r0, #4294967295
 8001c4c:	f7ff ff90 	bl	8001b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <SysTick_Config+0x40>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c56:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <SysTick_Config+0x40>)
 8001c58:	2207      	movs	r2, #7
 8001c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	e000e010 	.word	0xe000e010

08001c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff ff49 	bl	8001b0c <__NVIC_SetPriorityGrouping>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b086      	sub	sp, #24
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	4603      	mov	r3, r0
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
 8001c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c94:	f7ff ff5e 	bl	8001b54 <__NVIC_GetPriorityGrouping>
 8001c98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	68b9      	ldr	r1, [r7, #8]
 8001c9e:	6978      	ldr	r0, [r7, #20]
 8001ca0:	f7ff ff90 	bl	8001bc4 <NVIC_EncodePriority>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001caa:	4611      	mov	r1, r2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ff5f 	bl	8001b70 <__NVIC_SetPriority>
}
 8001cb2:	bf00      	nop
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff ffb0 	bl	8001c28 <SysTick_Config>
 8001cc8:	4603      	mov	r3, r0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
	...

08001cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b087      	sub	sp, #28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001cea:	e160      	b.n	8001fae <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 8152 	beq.w	8001fa8 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d00b      	beq.n	8001d24 <HAL_GPIO_Init+0x50>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d007      	beq.n	8001d24 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d18:	2b11      	cmp	r3, #17
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b12      	cmp	r3, #18
 8001d22:	d130      	bne.n	8001d86 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	2203      	movs	r2, #3
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	091b      	lsrs	r3, r3, #4
 8001d70:	f003 0201 	and.w	r2, r3, #1
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	2203      	movs	r2, #3
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43db      	mvns	r3, r3
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_Init+0xf2>
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b12      	cmp	r3, #18
 8001dc4:	d123      	bne.n	8001e0e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	08da      	lsrs	r2, r3, #3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3208      	adds	r2, #8
 8001dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	220f      	movs	r2, #15
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4013      	ands	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	691a      	ldr	r2, [r3, #16]
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	08da      	lsrs	r2, r3, #3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3208      	adds	r2, #8
 8001e08:	6939      	ldr	r1, [r7, #16]
 8001e0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	2203      	movs	r2, #3
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	4013      	ands	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 0203 	and.w	r2, r3, #3
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 80ac 	beq.w	8001fa8 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e50:	4b5e      	ldr	r3, [pc, #376]	; (8001fcc <HAL_GPIO_Init+0x2f8>)
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	4a5d      	ldr	r2, [pc, #372]	; (8001fcc <HAL_GPIO_Init+0x2f8>)
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	6213      	str	r3, [r2, #32]
 8001e5c:	4b5b      	ldr	r3, [pc, #364]	; (8001fcc <HAL_GPIO_Init+0x2f8>)
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e68:	4a59      	ldr	r2, [pc, #356]	; (8001fd0 <HAL_GPIO_Init+0x2fc>)
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	089b      	lsrs	r3, r3, #2
 8001e6e:	3302      	adds	r3, #2
 8001e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e74:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	220f      	movs	r2, #15
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a51      	ldr	r2, [pc, #324]	; (8001fd4 <HAL_GPIO_Init+0x300>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d025      	beq.n	8001ee0 <HAL_GPIO_Init+0x20c>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a50      	ldr	r2, [pc, #320]	; (8001fd8 <HAL_GPIO_Init+0x304>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d01f      	beq.n	8001edc <HAL_GPIO_Init+0x208>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a4f      	ldr	r2, [pc, #316]	; (8001fdc <HAL_GPIO_Init+0x308>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d019      	beq.n	8001ed8 <HAL_GPIO_Init+0x204>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a4e      	ldr	r2, [pc, #312]	; (8001fe0 <HAL_GPIO_Init+0x30c>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d013      	beq.n	8001ed4 <HAL_GPIO_Init+0x200>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a4d      	ldr	r2, [pc, #308]	; (8001fe4 <HAL_GPIO_Init+0x310>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d00d      	beq.n	8001ed0 <HAL_GPIO_Init+0x1fc>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a4c      	ldr	r2, [pc, #304]	; (8001fe8 <HAL_GPIO_Init+0x314>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d007      	beq.n	8001ecc <HAL_GPIO_Init+0x1f8>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a4b      	ldr	r2, [pc, #300]	; (8001fec <HAL_GPIO_Init+0x318>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d101      	bne.n	8001ec8 <HAL_GPIO_Init+0x1f4>
 8001ec4:	2306      	movs	r3, #6
 8001ec6:	e00c      	b.n	8001ee2 <HAL_GPIO_Init+0x20e>
 8001ec8:	2307      	movs	r3, #7
 8001eca:	e00a      	b.n	8001ee2 <HAL_GPIO_Init+0x20e>
 8001ecc:	2305      	movs	r3, #5
 8001ece:	e008      	b.n	8001ee2 <HAL_GPIO_Init+0x20e>
 8001ed0:	2304      	movs	r3, #4
 8001ed2:	e006      	b.n	8001ee2 <HAL_GPIO_Init+0x20e>
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e004      	b.n	8001ee2 <HAL_GPIO_Init+0x20e>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e002      	b.n	8001ee2 <HAL_GPIO_Init+0x20e>
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <HAL_GPIO_Init+0x20e>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	f002 0203 	and.w	r2, r2, #3
 8001ee8:	0092      	lsls	r2, r2, #2
 8001eea:	4093      	lsls	r3, r2
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ef2:	4937      	ldr	r1, [pc, #220]	; (8001fd0 <HAL_GPIO_Init+0x2fc>)
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	089b      	lsrs	r3, r3, #2
 8001ef8:	3302      	adds	r3, #2
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f00:	4b3b      	ldr	r3, [pc, #236]	; (8001ff0 <HAL_GPIO_Init+0x31c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f24:	4a32      	ldr	r2, [pc, #200]	; (8001ff0 <HAL_GPIO_Init+0x31c>)
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f2a:	4b31      	ldr	r3, [pc, #196]	; (8001ff0 <HAL_GPIO_Init+0x31c>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	43db      	mvns	r3, r3
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4013      	ands	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f4e:	4a28      	ldr	r2, [pc, #160]	; (8001ff0 <HAL_GPIO_Init+0x31c>)
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f54:	4b26      	ldr	r3, [pc, #152]	; (8001ff0 <HAL_GPIO_Init+0x31c>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4013      	ands	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f78:	4a1d      	ldr	r2, [pc, #116]	; (8001ff0 <HAL_GPIO_Init+0x31c>)
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f7e:	4b1c      	ldr	r3, [pc, #112]	; (8001ff0 <HAL_GPIO_Init+0x31c>)
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001fa2:	4a13      	ldr	r2, [pc, #76]	; (8001ff0 <HAL_GPIO_Init+0x31c>)
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	3301      	adds	r3, #1
 8001fac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f47f ae97 	bne.w	8001cec <HAL_GPIO_Init+0x18>
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	bf00      	nop
 8001fc2:	371c      	adds	r7, #28
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40010000 	.word	0x40010000
 8001fd4:	40020000 	.word	0x40020000
 8001fd8:	40020400 	.word	0x40020400
 8001fdc:	40020800 	.word	0x40020800
 8001fe0:	40020c00 	.word	0x40020c00
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40021400 	.word	0x40021400
 8001fec:	40021800 	.word	0x40021800
 8001ff0:	40010400 	.word	0x40010400

08001ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	807b      	strh	r3, [r7, #2]
 8002000:	4613      	mov	r3, r2
 8002002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002004:	787b      	ldrb	r3, [r7, #1]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800200a:	887a      	ldrh	r2, [r7, #2]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002010:	e003      	b.n	800201a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002012:	887b      	ldrh	r3, [r7, #2]
 8002014:	041a      	lsls	r2, r3, #16
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	619a      	str	r2, [r3, #24]
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr

08002024 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e12b      	b.n	800228e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d106      	bne.n	8002050 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff f92e 	bl	80012ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2224      	movs	r2, #36	; 0x24
 8002054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0201 	bic.w	r2, r2, #1
 8002066:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002076:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002086:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002088:	f001 fdca 	bl	8003c20 <HAL_RCC_GetPCLK1Freq>
 800208c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	4a81      	ldr	r2, [pc, #516]	; (8002298 <HAL_I2C_Init+0x274>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d807      	bhi.n	80020a8 <HAL_I2C_Init+0x84>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4a80      	ldr	r2, [pc, #512]	; (800229c <HAL_I2C_Init+0x278>)
 800209c:	4293      	cmp	r3, r2
 800209e:	bf94      	ite	ls
 80020a0:	2301      	movls	r3, #1
 80020a2:	2300      	movhi	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	e006      	b.n	80020b6 <HAL_I2C_Init+0x92>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4a7d      	ldr	r2, [pc, #500]	; (80022a0 <HAL_I2C_Init+0x27c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	bf94      	ite	ls
 80020b0:	2301      	movls	r3, #1
 80020b2:	2300      	movhi	r3, #0
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e0e7      	b.n	800228e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	4a78      	ldr	r2, [pc, #480]	; (80022a4 <HAL_I2C_Init+0x280>)
 80020c2:	fba2 2303 	umull	r2, r3, r2, r3
 80020c6:	0c9b      	lsrs	r3, r3, #18
 80020c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68ba      	ldr	r2, [r7, #8]
 80020da:	430a      	orrs	r2, r1
 80020dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	4a6a      	ldr	r2, [pc, #424]	; (8002298 <HAL_I2C_Init+0x274>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d802      	bhi.n	80020f8 <HAL_I2C_Init+0xd4>
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	3301      	adds	r3, #1
 80020f6:	e009      	b.n	800210c <HAL_I2C_Init+0xe8>
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020fe:	fb02 f303 	mul.w	r3, r2, r3
 8002102:	4a69      	ldr	r2, [pc, #420]	; (80022a8 <HAL_I2C_Init+0x284>)
 8002104:	fba2 2303 	umull	r2, r3, r2, r3
 8002108:	099b      	lsrs	r3, r3, #6
 800210a:	3301      	adds	r3, #1
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6812      	ldr	r2, [r2, #0]
 8002110:	430b      	orrs	r3, r1
 8002112:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800211e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	495c      	ldr	r1, [pc, #368]	; (8002298 <HAL_I2C_Init+0x274>)
 8002128:	428b      	cmp	r3, r1
 800212a:	d819      	bhi.n	8002160 <HAL_I2C_Init+0x13c>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	1e59      	subs	r1, r3, #1
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	fbb1 f3f3 	udiv	r3, r1, r3
 800213a:	1c59      	adds	r1, r3, #1
 800213c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002140:	400b      	ands	r3, r1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00a      	beq.n	800215c <HAL_I2C_Init+0x138>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	1e59      	subs	r1, r3, #1
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	fbb1 f3f3 	udiv	r3, r1, r3
 8002154:	3301      	adds	r3, #1
 8002156:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800215a:	e051      	b.n	8002200 <HAL_I2C_Init+0x1dc>
 800215c:	2304      	movs	r3, #4
 800215e:	e04f      	b.n	8002200 <HAL_I2C_Init+0x1dc>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d111      	bne.n	800218c <HAL_I2C_Init+0x168>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	1e58      	subs	r0, r3, #1
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6859      	ldr	r1, [r3, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	440b      	add	r3, r1
 8002176:	fbb0 f3f3 	udiv	r3, r0, r3
 800217a:	3301      	adds	r3, #1
 800217c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002180:	2b00      	cmp	r3, #0
 8002182:	bf0c      	ite	eq
 8002184:	2301      	moveq	r3, #1
 8002186:	2300      	movne	r3, #0
 8002188:	b2db      	uxtb	r3, r3
 800218a:	e012      	b.n	80021b2 <HAL_I2C_Init+0x18e>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	1e58      	subs	r0, r3, #1
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6859      	ldr	r1, [r3, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	0099      	lsls	r1, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	fbb0 f3f3 	udiv	r3, r0, r3
 80021a2:	3301      	adds	r3, #1
 80021a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	bf0c      	ite	eq
 80021ac:	2301      	moveq	r3, #1
 80021ae:	2300      	movne	r3, #0
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <HAL_I2C_Init+0x196>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e022      	b.n	8002200 <HAL_I2C_Init+0x1dc>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10e      	bne.n	80021e0 <HAL_I2C_Init+0x1bc>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	1e58      	subs	r0, r3, #1
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6859      	ldr	r1, [r3, #4]
 80021ca:	460b      	mov	r3, r1
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	440b      	add	r3, r1
 80021d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80021d4:	3301      	adds	r3, #1
 80021d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021de:	e00f      	b.n	8002200 <HAL_I2C_Init+0x1dc>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	1e58      	subs	r0, r3, #1
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6859      	ldr	r1, [r3, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	440b      	add	r3, r1
 80021ee:	0099      	lsls	r1, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021f6:	3301      	adds	r3, #1
 80021f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	6809      	ldr	r1, [r1, #0]
 8002204:	4313      	orrs	r3, r2
 8002206:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69da      	ldr	r2, [r3, #28]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a1b      	ldr	r3, [r3, #32]
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800222e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6911      	ldr	r1, [r2, #16]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	68d2      	ldr	r2, [r2, #12]
 800223a:	4311      	orrs	r1, r2
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6812      	ldr	r2, [r2, #0]
 8002240:	430b      	orrs	r3, r1
 8002242:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695a      	ldr	r2, [r3, #20]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	430a      	orrs	r2, r1
 800225e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0201 	orr.w	r2, r2, #1
 800226e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2220      	movs	r2, #32
 800227a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	000186a0 	.word	0x000186a0
 800229c:	001e847f 	.word	0x001e847f
 80022a0:	003d08ff 	.word	0x003d08ff
 80022a4:	431bde83 	.word	0x431bde83
 80022a8:	10624dd3 	.word	0x10624dd3

080022ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af02      	add	r7, sp, #8
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	607a      	str	r2, [r7, #4]
 80022b6:	461a      	mov	r2, r3
 80022b8:	460b      	mov	r3, r1
 80022ba:	817b      	strh	r3, [r7, #10]
 80022bc:	4613      	mov	r3, r2
 80022be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022c0:	f7ff fbf8 	bl	8001ab4 <HAL_GetTick>
 80022c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b20      	cmp	r3, #32
 80022d0:	f040 80e0 	bne.w	8002494 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	2319      	movs	r3, #25
 80022da:	2201      	movs	r2, #1
 80022dc:	4970      	ldr	r1, [pc, #448]	; (80024a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 fd86 	bl	8002df0 <I2C_WaitOnFlagUntilTimeout>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80022ea:	2302      	movs	r3, #2
 80022ec:	e0d3      	b.n	8002496 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <HAL_I2C_Master_Transmit+0x50>
 80022f8:	2302      	movs	r3, #2
 80022fa:	e0cc      	b.n	8002496 <HAL_I2C_Master_Transmit+0x1ea>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b01      	cmp	r3, #1
 8002310:	d007      	beq.n	8002322 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f042 0201 	orr.w	r2, r2, #1
 8002320:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002330:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2221      	movs	r2, #33	; 0x21
 8002336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2210      	movs	r2, #16
 800233e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	893a      	ldrh	r2, [r7, #8]
 8002352:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002358:	b29a      	uxth	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4a50      	ldr	r2, [pc, #320]	; (80024a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002362:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002364:	8979      	ldrh	r1, [r7, #10]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	6a3a      	ldr	r2, [r7, #32]
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f000 fbf0 	bl	8002b50 <I2C_MasterRequestWrite>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e08d      	b.n	8002496 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800237a:	2300      	movs	r3, #0
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002390:	e066      	b.n	8002460 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	6a39      	ldr	r1, [r7, #32]
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 fe00 	bl	8002f9c <I2C_WaitOnTXEFlagUntilTimeout>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00d      	beq.n	80023be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d107      	bne.n	80023ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e06b      	b.n	8002496 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	781a      	ldrb	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	1c5a      	adds	r2, r3, #1
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d8:	b29b      	uxth	r3, r3
 80023da:	3b01      	subs	r3, #1
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e6:	3b01      	subs	r3, #1
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d11b      	bne.n	8002434 <HAL_I2C_Master_Transmit+0x188>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002400:	2b00      	cmp	r3, #0
 8002402:	d017      	beq.n	8002434 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	781a      	ldrb	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	1c5a      	adds	r2, r3, #1
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241e:	b29b      	uxth	r3, r3
 8002420:	3b01      	subs	r3, #1
 8002422:	b29a      	uxth	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242c:	3b01      	subs	r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	6a39      	ldr	r1, [r7, #32]
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 fdf0 	bl	800301e <I2C_WaitOnBTFFlagUntilTimeout>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00d      	beq.n	8002460 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002448:	2b04      	cmp	r3, #4
 800244a:	d107      	bne.n	800245c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800245a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e01a      	b.n	8002496 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002464:	2b00      	cmp	r3, #0
 8002466:	d194      	bne.n	8002392 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002476:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2220      	movs	r2, #32
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	e000      	b.n	8002496 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002494:	2302      	movs	r3, #2
  }
}
 8002496:	4618      	mov	r0, r3
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	00100002 	.word	0x00100002
 80024a4:	ffff0000 	.word	0xffff0000

080024a8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08c      	sub	sp, #48	; 0x30
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	607a      	str	r2, [r7, #4]
 80024b2:	461a      	mov	r2, r3
 80024b4:	460b      	mov	r3, r1
 80024b6:	817b      	strh	r3, [r7, #10]
 80024b8:	4613      	mov	r3, r2
 80024ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024bc:	f7ff fafa 	bl	8001ab4 <HAL_GetTick>
 80024c0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b20      	cmp	r3, #32
 80024cc:	f040 820b 	bne.w	80028e6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	2319      	movs	r3, #25
 80024d6:	2201      	movs	r2, #1
 80024d8:	497c      	ldr	r1, [pc, #496]	; (80026cc <HAL_I2C_Master_Receive+0x224>)
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f000 fc88 	bl	8002df0 <I2C_WaitOnFlagUntilTimeout>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80024e6:	2302      	movs	r3, #2
 80024e8:	e1fe      	b.n	80028e8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <HAL_I2C_Master_Receive+0x50>
 80024f4:	2302      	movs	r3, #2
 80024f6:	e1f7      	b.n	80028e8 <HAL_I2C_Master_Receive+0x440>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b01      	cmp	r3, #1
 800250c:	d007      	beq.n	800251e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f042 0201 	orr.w	r2, r2, #1
 800251c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800252c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2222      	movs	r2, #34	; 0x22
 8002532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2210      	movs	r2, #16
 800253a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	893a      	ldrh	r2, [r7, #8]
 800254e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002554:	b29a      	uxth	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	4a5c      	ldr	r2, [pc, #368]	; (80026d0 <HAL_I2C_Master_Receive+0x228>)
 800255e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002560:	8979      	ldrh	r1, [r7, #10]
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 fb74 	bl	8002c54 <I2C_MasterRequestRead>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e1b8      	b.n	80028e8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257a:	2b00      	cmp	r3, #0
 800257c:	d113      	bne.n	80025a6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800257e:	2300      	movs	r3, #0
 8002580:	623b      	str	r3, [r7, #32]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	623b      	str	r3, [r7, #32]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	623b      	str	r3, [r7, #32]
 8002592:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	e18c      	b.n	80028c0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d11b      	bne.n	80025e6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	61fb      	str	r3, [r7, #28]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	61fb      	str	r3, [r7, #28]
 80025d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	e16c      	b.n	80028c0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d11b      	bne.n	8002626 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800260c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800260e:	2300      	movs	r3, #0
 8002610:	61bb      	str	r3, [r7, #24]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	61bb      	str	r3, [r7, #24]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	61bb      	str	r3, [r7, #24]
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	e14c      	b.n	80028c0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002634:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	617b      	str	r3, [r7, #20]
 800264a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800264c:	e138      	b.n	80028c0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002652:	2b03      	cmp	r3, #3
 8002654:	f200 80f1 	bhi.w	800283a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265c:	2b01      	cmp	r3, #1
 800265e:	d123      	bne.n	80026a8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002662:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 fd1b 	bl	80030a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e139      	b.n	80028e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	691a      	ldr	r2, [r3, #16]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	1c5a      	adds	r2, r3, #1
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002690:	3b01      	subs	r3, #1
 8002692:	b29a      	uxth	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269c:	b29b      	uxth	r3, r3
 800269e:	3b01      	subs	r3, #1
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026a6:	e10b      	b.n	80028c0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d14e      	bne.n	800274e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b6:	2200      	movs	r2, #0
 80026b8:	4906      	ldr	r1, [pc, #24]	; (80026d4 <HAL_I2C_Master_Receive+0x22c>)
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 fb98 	bl	8002df0 <I2C_WaitOnFlagUntilTimeout>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d008      	beq.n	80026d8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e10e      	b.n	80028e8 <HAL_I2C_Master_Receive+0x440>
 80026ca:	bf00      	nop
 80026cc:	00100002 	.word	0x00100002
 80026d0:	ffff0000 	.word	0xffff0000
 80026d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691a      	ldr	r2, [r3, #16]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002704:	3b01      	subs	r3, #1
 8002706:	b29a      	uxth	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002710:	b29b      	uxth	r3, r3
 8002712:	3b01      	subs	r3, #1
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	1c5a      	adds	r2, r3, #1
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002736:	3b01      	subs	r3, #1
 8002738:	b29a      	uxth	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002742:	b29b      	uxth	r3, r3
 8002744:	3b01      	subs	r3, #1
 8002746:	b29a      	uxth	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800274c:	e0b8      	b.n	80028c0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002754:	2200      	movs	r2, #0
 8002756:	4966      	ldr	r1, [pc, #408]	; (80028f0 <HAL_I2C_Master_Receive+0x448>)
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 fb49 	bl	8002df0 <I2C_WaitOnFlagUntilTimeout>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e0bf      	b.n	80028e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002776:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002794:	3b01      	subs	r3, #1
 8002796:	b29a      	uxth	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b0:	2200      	movs	r2, #0
 80027b2:	494f      	ldr	r1, [pc, #316]	; (80028f0 <HAL_I2C_Master_Receive+0x448>)
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 fb1b 	bl	8002df0 <I2C_WaitOnFlagUntilTimeout>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e091      	b.n	80028e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	691a      	ldr	r2, [r3, #16]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f0:	3b01      	subs	r3, #1
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	3b01      	subs	r3, #1
 8002800:	b29a      	uxth	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	691a      	ldr	r2, [r3, #16]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002822:	3b01      	subs	r3, #1
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282e:	b29b      	uxth	r3, r3
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002838:	e042      	b.n	80028c0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800283a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800283c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 fc2e 	bl	80030a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e04c      	b.n	80028e8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	691a      	ldr	r2, [r3, #16]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286a:	3b01      	subs	r3, #1
 800286c:	b29a      	uxth	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002876:	b29b      	uxth	r3, r3
 8002878:	3b01      	subs	r3, #1
 800287a:	b29a      	uxth	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	2b04      	cmp	r3, #4
 800288c:	d118      	bne.n	80028c0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	691a      	ldr	r2, [r3, #16]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f47f aec2 	bne.w	800264e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2220      	movs	r2, #32
 80028ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028e2:	2300      	movs	r3, #0
 80028e4:	e000      	b.n	80028e8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80028e6:	2302      	movs	r3, #2
  }
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3728      	adds	r7, #40	; 0x28
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	00010004 	.word	0x00010004

080028f4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08a      	sub	sp, #40	; 0x28
 80028f8:	af02      	add	r7, sp, #8
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	607a      	str	r2, [r7, #4]
 80028fe:	603b      	str	r3, [r7, #0]
 8002900:	460b      	mov	r3, r1
 8002902:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002904:	f7ff f8d6 	bl	8001ab4 <HAL_GetTick>
 8002908:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800290a:	2301      	movs	r3, #1
 800290c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b20      	cmp	r3, #32
 8002918:	f040 8111 	bne.w	8002b3e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	2319      	movs	r3, #25
 8002922:	2201      	movs	r2, #1
 8002924:	4988      	ldr	r1, [pc, #544]	; (8002b48 <HAL_I2C_IsDeviceReady+0x254>)
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 fa62 	bl	8002df0 <I2C_WaitOnFlagUntilTimeout>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002932:	2302      	movs	r3, #2
 8002934:	e104      	b.n	8002b40 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800293c:	2b01      	cmp	r3, #1
 800293e:	d101      	bne.n	8002944 <HAL_I2C_IsDeviceReady+0x50>
 8002940:	2302      	movs	r3, #2
 8002942:	e0fd      	b.n	8002b40 <HAL_I2C_IsDeviceReady+0x24c>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b01      	cmp	r3, #1
 8002958:	d007      	beq.n	800296a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f042 0201 	orr.w	r2, r2, #1
 8002968:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002978:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2224      	movs	r2, #36	; 0x24
 800297e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4a70      	ldr	r2, [pc, #448]	; (8002b4c <HAL_I2C_IsDeviceReady+0x258>)
 800298c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800299c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 fa20 	bl	8002df0 <I2C_WaitOnFlagUntilTimeout>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00d      	beq.n	80029d2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029c4:	d103      	bne.n	80029ce <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029cc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e0b6      	b.n	8002b40 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029d2:	897b      	ldrh	r3, [r7, #10]
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	461a      	mov	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029e0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80029e2:	f7ff f867 	bl	8001ab4 <HAL_GetTick>
 80029e6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	bf0c      	ite	eq
 80029f6:	2301      	moveq	r3, #1
 80029f8:	2300      	movne	r3, #0
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a0c:	bf0c      	ite	eq
 8002a0e:	2301      	moveq	r3, #1
 8002a10:	2300      	movne	r3, #0
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002a16:	e025      	b.n	8002a64 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a18:	f7ff f84c 	bl	8001ab4 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d302      	bcc.n	8002a2e <HAL_I2C_IsDeviceReady+0x13a>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d103      	bne.n	8002a36 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	22a0      	movs	r2, #160	; 0xa0
 8002a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	bf0c      	ite	eq
 8002a44:	2301      	moveq	r3, #1
 8002a46:	2300      	movne	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a5a:	bf0c      	ite	eq
 8002a5c:	2301      	moveq	r3, #1
 8002a5e:	2300      	movne	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2ba0      	cmp	r3, #160	; 0xa0
 8002a6e:	d005      	beq.n	8002a7c <HAL_I2C_IsDeviceReady+0x188>
 8002a70:	7dfb      	ldrb	r3, [r7, #23]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d102      	bne.n	8002a7c <HAL_I2C_IsDeviceReady+0x188>
 8002a76:	7dbb      	ldrb	r3, [r7, #22]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0cd      	beq.n	8002a18 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d129      	bne.n	8002ae6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	2319      	movs	r3, #25
 8002abe:	2201      	movs	r2, #1
 8002ac0:	4921      	ldr	r1, [pc, #132]	; (8002b48 <HAL_I2C_IsDeviceReady+0x254>)
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 f994 	bl	8002df0 <I2C_WaitOnFlagUntilTimeout>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e036      	b.n	8002b40 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e02c      	b.n	8002b40 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002af4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002afe:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	2319      	movs	r3, #25
 8002b06:	2201      	movs	r2, #1
 8002b08:	490f      	ldr	r1, [pc, #60]	; (8002b48 <HAL_I2C_IsDeviceReady+0x254>)
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 f970 	bl	8002df0 <I2C_WaitOnFlagUntilTimeout>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e012      	b.n	8002b40 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	f4ff af32 	bcc.w	800298e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002b3e:	2302      	movs	r3, #2
  }
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3720      	adds	r7, #32
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	00100002 	.word	0x00100002
 8002b4c:	ffff0000 	.word	0xffff0000

08002b50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b088      	sub	sp, #32
 8002b54:	af02      	add	r7, sp, #8
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	607a      	str	r2, [r7, #4]
 8002b5a:	603b      	str	r3, [r7, #0]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d006      	beq.n	8002b7a <I2C_MasterRequestWrite+0x2a>
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d003      	beq.n	8002b7a <I2C_MasterRequestWrite+0x2a>
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b78:	d108      	bne.n	8002b8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	e00b      	b.n	8002ba4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b90:	2b12      	cmp	r3, #18
 8002b92:	d107      	bne.n	8002ba4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ba2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 f91d 	bl	8002df0 <I2C_WaitOnFlagUntilTimeout>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00d      	beq.n	8002bd8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bca:	d103      	bne.n	8002bd4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bd2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e035      	b.n	8002c44 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002be0:	d108      	bne.n	8002bf4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002be2:	897b      	ldrh	r3, [r7, #10]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	461a      	mov	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bf0:	611a      	str	r2, [r3, #16]
 8002bf2:	e01b      	b.n	8002c2c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002bf4:	897b      	ldrh	r3, [r7, #10]
 8002bf6:	11db      	asrs	r3, r3, #7
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	f003 0306 	and.w	r3, r3, #6
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	f063 030f 	orn	r3, r3, #15
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	490e      	ldr	r1, [pc, #56]	; (8002c4c <I2C_MasterRequestWrite+0xfc>)
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f943 	bl	8002e9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e010      	b.n	8002c44 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c22:	897b      	ldrh	r3, [r7, #10]
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	4907      	ldr	r1, [pc, #28]	; (8002c50 <I2C_MasterRequestWrite+0x100>)
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 f933 	bl	8002e9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	00010008 	.word	0x00010008
 8002c50:	00010002 	.word	0x00010002

08002c54 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b088      	sub	sp, #32
 8002c58:	af02      	add	r7, sp, #8
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	607a      	str	r2, [r7, #4]
 8002c5e:	603b      	str	r3, [r7, #0]
 8002c60:	460b      	mov	r3, r1
 8002c62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c68:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c78:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d006      	beq.n	8002c8e <I2C_MasterRequestRead+0x3a>
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d003      	beq.n	8002c8e <I2C_MasterRequestRead+0x3a>
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c8c:	d108      	bne.n	8002ca0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	e00b      	b.n	8002cb8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca4:	2b11      	cmp	r3, #17
 8002ca6:	d107      	bne.n	8002cb8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cb6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 f893 	bl	8002df0 <I2C_WaitOnFlagUntilTimeout>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00d      	beq.n	8002cec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cde:	d103      	bne.n	8002ce8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ce6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e079      	b.n	8002de0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cf4:	d108      	bne.n	8002d08 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002cf6:	897b      	ldrh	r3, [r7, #10]
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	f043 0301 	orr.w	r3, r3, #1
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	611a      	str	r2, [r3, #16]
 8002d06:	e05f      	b.n	8002dc8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d08:	897b      	ldrh	r3, [r7, #10]
 8002d0a:	11db      	asrs	r3, r3, #7
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	f003 0306 	and.w	r3, r3, #6
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	f063 030f 	orn	r3, r3, #15
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	4930      	ldr	r1, [pc, #192]	; (8002de8 <I2C_MasterRequestRead+0x194>)
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 f8b9 	bl	8002e9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e054      	b.n	8002de0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d36:	897b      	ldrh	r3, [r7, #10]
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	4929      	ldr	r1, [pc, #164]	; (8002dec <I2C_MasterRequestRead+0x198>)
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 f8a9 	bl	8002e9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e044      	b.n	8002de0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d56:	2300      	movs	r3, #0
 8002d58:	613b      	str	r3, [r7, #16]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	613b      	str	r3, [r7, #16]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	613b      	str	r3, [r7, #16]
 8002d6a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d7a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 f831 	bl	8002df0 <I2C_WaitOnFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00d      	beq.n	8002db0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002da2:	d103      	bne.n	8002dac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002daa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e017      	b.n	8002de0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002db0:	897b      	ldrh	r3, [r7, #10]
 8002db2:	11db      	asrs	r3, r3, #7
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	f003 0306 	and.w	r3, r3, #6
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	f063 030e 	orn	r3, r3, #14
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	4907      	ldr	r1, [pc, #28]	; (8002dec <I2C_MasterRequestRead+0x198>)
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 f865 	bl	8002e9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e000      	b.n	8002de0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	00010008 	.word	0x00010008
 8002dec:	00010002 	.word	0x00010002

08002df0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	603b      	str	r3, [r7, #0]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e00:	e025      	b.n	8002e4e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e08:	d021      	beq.n	8002e4e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e0a:	f7fe fe53 	bl	8001ab4 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d302      	bcc.n	8002e20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d116      	bne.n	8002e4e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	f043 0220 	orr.w	r2, r3, #32
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e023      	b.n	8002e96 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	0c1b      	lsrs	r3, r3, #16
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d10d      	bne.n	8002e74 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	43da      	mvns	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	4013      	ands	r3, r2
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	bf0c      	ite	eq
 8002e6a:	2301      	moveq	r3, #1
 8002e6c:	2300      	movne	r3, #0
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	461a      	mov	r2, r3
 8002e72:	e00c      	b.n	8002e8e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	43da      	mvns	r2, r3
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	bf0c      	ite	eq
 8002e86:	2301      	moveq	r3, #1
 8002e88:	2300      	movne	r3, #0
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d0b6      	beq.n	8002e02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b084      	sub	sp, #16
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	60f8      	str	r0, [r7, #12]
 8002ea6:	60b9      	str	r1, [r7, #8]
 8002ea8:	607a      	str	r2, [r7, #4]
 8002eaa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002eac:	e051      	b.n	8002f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ebc:	d123      	bne.n	8002f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ecc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ed6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	f043 0204 	orr.w	r2, r3, #4
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e046      	b.n	8002f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0c:	d021      	beq.n	8002f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f0e:	f7fe fdd1 	bl	8001ab4 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d302      	bcc.n	8002f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d116      	bne.n	8002f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	f043 0220 	orr.w	r2, r3, #32
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e020      	b.n	8002f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	0c1b      	lsrs	r3, r3, #16
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d10c      	bne.n	8002f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	43da      	mvns	r2, r3
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	4013      	ands	r3, r2
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	bf14      	ite	ne
 8002f6e:	2301      	movne	r3, #1
 8002f70:	2300      	moveq	r3, #0
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	e00b      	b.n	8002f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	43da      	mvns	r2, r3
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	4013      	ands	r3, r2
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	bf14      	ite	ne
 8002f88:	2301      	movne	r3, #1
 8002f8a:	2300      	moveq	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d18d      	bne.n	8002eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fa8:	e02d      	b.n	8003006 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 f8ce 	bl	800314c <I2C_IsAcknowledgeFailed>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e02d      	b.n	8003016 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc0:	d021      	beq.n	8003006 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc2:	f7fe fd77 	bl	8001ab4 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d302      	bcc.n	8002fd8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d116      	bne.n	8003006 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	f043 0220 	orr.w	r2, r3, #32
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e007      	b.n	8003016 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003010:	2b80      	cmp	r3, #128	; 0x80
 8003012:	d1ca      	bne.n	8002faa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b084      	sub	sp, #16
 8003022:	af00      	add	r7, sp, #0
 8003024:	60f8      	str	r0, [r7, #12]
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800302a:	e02d      	b.n	8003088 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 f88d 	bl	800314c <I2C_IsAcknowledgeFailed>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e02d      	b.n	8003098 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003042:	d021      	beq.n	8003088 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003044:	f7fe fd36 	bl	8001ab4 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	429a      	cmp	r2, r3
 8003052:	d302      	bcc.n	800305a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d116      	bne.n	8003088 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	f043 0220 	orr.w	r2, r3, #32
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e007      	b.n	8003098 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f003 0304 	and.w	r3, r3, #4
 8003092:	2b04      	cmp	r3, #4
 8003094:	d1ca      	bne.n	800302c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030ac:	e042      	b.n	8003134 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	f003 0310 	and.w	r3, r3, #16
 80030b8:	2b10      	cmp	r3, #16
 80030ba:	d119      	bne.n	80030f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f06f 0210 	mvn.w	r2, #16
 80030c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2220      	movs	r2, #32
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e029      	b.n	8003144 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f0:	f7fe fce0 	bl	8001ab4 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d302      	bcc.n	8003106 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d116      	bne.n	8003134 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003120:	f043 0220 	orr.w	r2, r3, #32
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e007      	b.n	8003144 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313e:	2b40      	cmp	r3, #64	; 0x40
 8003140:	d1b5      	bne.n	80030ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003162:	d11b      	bne.n	800319c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800316c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2220      	movs	r2, #32
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003188:	f043 0204 	orr.w	r2, r3, #4
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr

080031a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b088      	sub	sp, #32
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e31d      	b.n	80037f6 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031ba:	4b94      	ldr	r3, [pc, #592]	; (800340c <HAL_RCC_OscConfig+0x264>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031c4:	4b91      	ldr	r3, [pc, #580]	; (800340c <HAL_RCC_OscConfig+0x264>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031cc:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d07b      	beq.n	80032d2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d006      	beq.n	80031ee <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	2b0c      	cmp	r3, #12
 80031e4:	d10f      	bne.n	8003206 <HAL_RCC_OscConfig+0x5e>
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ec:	d10b      	bne.n	8003206 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ee:	4b87      	ldr	r3, [pc, #540]	; (800340c <HAL_RCC_OscConfig+0x264>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d06a      	beq.n	80032d0 <HAL_RCC_OscConfig+0x128>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d166      	bne.n	80032d0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e2f7      	b.n	80037f6 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d106      	bne.n	800321c <HAL_RCC_OscConfig+0x74>
 800320e:	4b7f      	ldr	r3, [pc, #508]	; (800340c <HAL_RCC_OscConfig+0x264>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a7e      	ldr	r2, [pc, #504]	; (800340c <HAL_RCC_OscConfig+0x264>)
 8003214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	e02d      	b.n	8003278 <HAL_RCC_OscConfig+0xd0>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10c      	bne.n	800323e <HAL_RCC_OscConfig+0x96>
 8003224:	4b79      	ldr	r3, [pc, #484]	; (800340c <HAL_RCC_OscConfig+0x264>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a78      	ldr	r2, [pc, #480]	; (800340c <HAL_RCC_OscConfig+0x264>)
 800322a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	4b76      	ldr	r3, [pc, #472]	; (800340c <HAL_RCC_OscConfig+0x264>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a75      	ldr	r2, [pc, #468]	; (800340c <HAL_RCC_OscConfig+0x264>)
 8003236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800323a:	6013      	str	r3, [r2, #0]
 800323c:	e01c      	b.n	8003278 <HAL_RCC_OscConfig+0xd0>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2b05      	cmp	r3, #5
 8003244:	d10c      	bne.n	8003260 <HAL_RCC_OscConfig+0xb8>
 8003246:	4b71      	ldr	r3, [pc, #452]	; (800340c <HAL_RCC_OscConfig+0x264>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a70      	ldr	r2, [pc, #448]	; (800340c <HAL_RCC_OscConfig+0x264>)
 800324c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	4b6e      	ldr	r3, [pc, #440]	; (800340c <HAL_RCC_OscConfig+0x264>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a6d      	ldr	r2, [pc, #436]	; (800340c <HAL_RCC_OscConfig+0x264>)
 8003258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	e00b      	b.n	8003278 <HAL_RCC_OscConfig+0xd0>
 8003260:	4b6a      	ldr	r3, [pc, #424]	; (800340c <HAL_RCC_OscConfig+0x264>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a69      	ldr	r2, [pc, #420]	; (800340c <HAL_RCC_OscConfig+0x264>)
 8003266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800326a:	6013      	str	r3, [r2, #0]
 800326c:	4b67      	ldr	r3, [pc, #412]	; (800340c <HAL_RCC_OscConfig+0x264>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a66      	ldr	r2, [pc, #408]	; (800340c <HAL_RCC_OscConfig+0x264>)
 8003272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003276:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d013      	beq.n	80032a8 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003280:	f7fe fc18 	bl	8001ab4 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003288:	f7fe fc14 	bl	8001ab4 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b64      	cmp	r3, #100	; 0x64
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e2ad      	b.n	80037f6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800329a:	4b5c      	ldr	r3, [pc, #368]	; (800340c <HAL_RCC_OscConfig+0x264>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f0      	beq.n	8003288 <HAL_RCC_OscConfig+0xe0>
 80032a6:	e014      	b.n	80032d2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a8:	f7fe fc04 	bl	8001ab4 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032b0:	f7fe fc00 	bl	8001ab4 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b64      	cmp	r3, #100	; 0x64
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e299      	b.n	80037f6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032c2:	4b52      	ldr	r3, [pc, #328]	; (800340c <HAL_RCC_OscConfig+0x264>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0x108>
 80032ce:	e000      	b.n	80032d2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d05a      	beq.n	8003394 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d005      	beq.n	80032f0 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	2b0c      	cmp	r3, #12
 80032e8:	d119      	bne.n	800331e <HAL_RCC_OscConfig+0x176>
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d116      	bne.n	800331e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f0:	4b46      	ldr	r3, [pc, #280]	; (800340c <HAL_RCC_OscConfig+0x264>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <HAL_RCC_OscConfig+0x160>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d001      	beq.n	8003308 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e276      	b.n	80037f6 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003308:	4b40      	ldr	r3, [pc, #256]	; (800340c <HAL_RCC_OscConfig+0x264>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	021b      	lsls	r3, r3, #8
 8003316:	493d      	ldr	r1, [pc, #244]	; (800340c <HAL_RCC_OscConfig+0x264>)
 8003318:	4313      	orrs	r3, r2
 800331a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800331c:	e03a      	b.n	8003394 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d020      	beq.n	8003368 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003326:	4b3a      	ldr	r3, [pc, #232]	; (8003410 <HAL_RCC_OscConfig+0x268>)
 8003328:	2201      	movs	r2, #1
 800332a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332c:	f7fe fbc2 	bl	8001ab4 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003334:	f7fe fbbe 	bl	8001ab4 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e257      	b.n	80037f6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003346:	4b31      	ldr	r3, [pc, #196]	; (800340c <HAL_RCC_OscConfig+0x264>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0f0      	beq.n	8003334 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003352:	4b2e      	ldr	r3, [pc, #184]	; (800340c <HAL_RCC_OscConfig+0x264>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	021b      	lsls	r3, r3, #8
 8003360:	492a      	ldr	r1, [pc, #168]	; (800340c <HAL_RCC_OscConfig+0x264>)
 8003362:	4313      	orrs	r3, r2
 8003364:	604b      	str	r3, [r1, #4]
 8003366:	e015      	b.n	8003394 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003368:	4b29      	ldr	r3, [pc, #164]	; (8003410 <HAL_RCC_OscConfig+0x268>)
 800336a:	2200      	movs	r2, #0
 800336c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336e:	f7fe fba1 	bl	8001ab4 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003376:	f7fe fb9d 	bl	8001ab4 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e236      	b.n	80037f6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003388:	4b20      	ldr	r3, [pc, #128]	; (800340c <HAL_RCC_OscConfig+0x264>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1f0      	bne.n	8003376 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0310 	and.w	r3, r3, #16
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 80b8 	beq.w	8003512 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d170      	bne.n	800348a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033a8:	4b18      	ldr	r3, [pc, #96]	; (800340c <HAL_RCC_OscConfig+0x264>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <HAL_RCC_OscConfig+0x218>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e21a      	b.n	80037f6 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1a      	ldr	r2, [r3, #32]
 80033c4:	4b11      	ldr	r3, [pc, #68]	; (800340c <HAL_RCC_OscConfig+0x264>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d921      	bls.n	8003414 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 fc4b 	bl	8003c70 <RCC_SetFlashLatencyFromMSIRange>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e208      	b.n	80037f6 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033e4:	4b09      	ldr	r3, [pc, #36]	; (800340c <HAL_RCC_OscConfig+0x264>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	4906      	ldr	r1, [pc, #24]	; (800340c <HAL_RCC_OscConfig+0x264>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033f6:	4b05      	ldr	r3, [pc, #20]	; (800340c <HAL_RCC_OscConfig+0x264>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	061b      	lsls	r3, r3, #24
 8003404:	4901      	ldr	r1, [pc, #4]	; (800340c <HAL_RCC_OscConfig+0x264>)
 8003406:	4313      	orrs	r3, r2
 8003408:	604b      	str	r3, [r1, #4]
 800340a:	e020      	b.n	800344e <HAL_RCC_OscConfig+0x2a6>
 800340c:	40023800 	.word	0x40023800
 8003410:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003414:	4ba4      	ldr	r3, [pc, #656]	; (80036a8 <HAL_RCC_OscConfig+0x500>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	49a1      	ldr	r1, [pc, #644]	; (80036a8 <HAL_RCC_OscConfig+0x500>)
 8003422:	4313      	orrs	r3, r2
 8003424:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003426:	4ba0      	ldr	r3, [pc, #640]	; (80036a8 <HAL_RCC_OscConfig+0x500>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	061b      	lsls	r3, r3, #24
 8003434:	499c      	ldr	r1, [pc, #624]	; (80036a8 <HAL_RCC_OscConfig+0x500>)
 8003436:	4313      	orrs	r3, r2
 8003438:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	4618      	mov	r0, r3
 8003440:	f000 fc16 	bl	8003c70 <RCC_SetFlashLatencyFromMSIRange>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e1d3      	b.n	80037f6 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	0b5b      	lsrs	r3, r3, #13
 8003454:	3301      	adds	r3, #1
 8003456:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800345e:	4a92      	ldr	r2, [pc, #584]	; (80036a8 <HAL_RCC_OscConfig+0x500>)
 8003460:	6892      	ldr	r2, [r2, #8]
 8003462:	0912      	lsrs	r2, r2, #4
 8003464:	f002 020f 	and.w	r2, r2, #15
 8003468:	4990      	ldr	r1, [pc, #576]	; (80036ac <HAL_RCC_OscConfig+0x504>)
 800346a:	5c8a      	ldrb	r2, [r1, r2]
 800346c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800346e:	4a90      	ldr	r2, [pc, #576]	; (80036b0 <HAL_RCC_OscConfig+0x508>)
 8003470:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003472:	4b90      	ldr	r3, [pc, #576]	; (80036b4 <HAL_RCC_OscConfig+0x50c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f7fe fad0 	bl	8001a1c <HAL_InitTick>
 800347c:	4603      	mov	r3, r0
 800347e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003480:	7bfb      	ldrb	r3, [r7, #15]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d045      	beq.n	8003512 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003486:	7bfb      	ldrb	r3, [r7, #15]
 8003488:	e1b5      	b.n	80037f6 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d029      	beq.n	80034e6 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003492:	4b89      	ldr	r3, [pc, #548]	; (80036b8 <HAL_RCC_OscConfig+0x510>)
 8003494:	2201      	movs	r2, #1
 8003496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003498:	f7fe fb0c 	bl	8001ab4 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034a0:	f7fe fb08 	bl	8001ab4 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e1a1      	b.n	80037f6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80034b2:	4b7d      	ldr	r3, [pc, #500]	; (80036a8 <HAL_RCC_OscConfig+0x500>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0f0      	beq.n	80034a0 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034be:	4b7a      	ldr	r3, [pc, #488]	; (80036a8 <HAL_RCC_OscConfig+0x500>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	4977      	ldr	r1, [pc, #476]	; (80036a8 <HAL_RCC_OscConfig+0x500>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034d0:	4b75      	ldr	r3, [pc, #468]	; (80036a8 <HAL_RCC_OscConfig+0x500>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	061b      	lsls	r3, r3, #24
 80034de:	4972      	ldr	r1, [pc, #456]	; (80036a8 <HAL_RCC_OscConfig+0x500>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	604b      	str	r3, [r1, #4]
 80034e4:	e015      	b.n	8003512 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034e6:	4b74      	ldr	r3, [pc, #464]	; (80036b8 <HAL_RCC_OscConfig+0x510>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ec:	f7fe fae2 	bl	8001ab4 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034f4:	f7fe fade 	bl	8001ab4 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e177      	b.n	80037f6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003506:	4b68      	ldr	r3, [pc, #416]	; (80036a8 <HAL_RCC_OscConfig+0x500>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f0      	bne.n	80034f4 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	2b00      	cmp	r3, #0
 800351c:	d030      	beq.n	8003580 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d016      	beq.n	8003554 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003526:	4b65      	ldr	r3, [pc, #404]	; (80036bc <HAL_RCC_OscConfig+0x514>)
 8003528:	2201      	movs	r2, #1
 800352a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352c:	f7fe fac2 	bl	8001ab4 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003534:	f7fe fabe 	bl	8001ab4 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e157      	b.n	80037f6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003546:	4b58      	ldr	r3, [pc, #352]	; (80036a8 <HAL_RCC_OscConfig+0x500>)
 8003548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0f0      	beq.n	8003534 <HAL_RCC_OscConfig+0x38c>
 8003552:	e015      	b.n	8003580 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003554:	4b59      	ldr	r3, [pc, #356]	; (80036bc <HAL_RCC_OscConfig+0x514>)
 8003556:	2200      	movs	r2, #0
 8003558:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800355a:	f7fe faab 	bl	8001ab4 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003562:	f7fe faa7 	bl	8001ab4 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e140      	b.n	80037f6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003574:	4b4c      	ldr	r3, [pc, #304]	; (80036a8 <HAL_RCC_OscConfig+0x500>)
 8003576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1f0      	bne.n	8003562 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 80b5 	beq.w	80036f8 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800358e:	2300      	movs	r3, #0
 8003590:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003592:	4b45      	ldr	r3, [pc, #276]	; (80036a8 <HAL_RCC_OscConfig+0x500>)
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10d      	bne.n	80035ba <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800359e:	4b42      	ldr	r3, [pc, #264]	; (80036a8 <HAL_RCC_OscConfig+0x500>)
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	4a41      	ldr	r2, [pc, #260]	; (80036a8 <HAL_RCC_OscConfig+0x500>)
 80035a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a8:	6253      	str	r3, [r2, #36]	; 0x24
 80035aa:	4b3f      	ldr	r3, [pc, #252]	; (80036a8 <HAL_RCC_OscConfig+0x500>)
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b2:	60bb      	str	r3, [r7, #8]
 80035b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035b6:	2301      	movs	r3, #1
 80035b8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ba:	4b41      	ldr	r3, [pc, #260]	; (80036c0 <HAL_RCC_OscConfig+0x518>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d118      	bne.n	80035f8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035c6:	4b3e      	ldr	r3, [pc, #248]	; (80036c0 <HAL_RCC_OscConfig+0x518>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a3d      	ldr	r2, [pc, #244]	; (80036c0 <HAL_RCC_OscConfig+0x518>)
 80035cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035d2:	f7fe fa6f 	bl	8001ab4 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d8:	e008      	b.n	80035ec <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035da:	f7fe fa6b 	bl	8001ab4 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b64      	cmp	r3, #100	; 0x64
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e104      	b.n	80037f6 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ec:	4b34      	ldr	r3, [pc, #208]	; (80036c0 <HAL_RCC_OscConfig+0x518>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0f0      	beq.n	80035da <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d106      	bne.n	800360e <HAL_RCC_OscConfig+0x466>
 8003600:	4b29      	ldr	r3, [pc, #164]	; (80036a8 <HAL_RCC_OscConfig+0x500>)
 8003602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003604:	4a28      	ldr	r2, [pc, #160]	; (80036a8 <HAL_RCC_OscConfig+0x500>)
 8003606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800360a:	6353      	str	r3, [r2, #52]	; 0x34
 800360c:	e02d      	b.n	800366a <HAL_RCC_OscConfig+0x4c2>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10c      	bne.n	8003630 <HAL_RCC_OscConfig+0x488>
 8003616:	4b24      	ldr	r3, [pc, #144]	; (80036a8 <HAL_RCC_OscConfig+0x500>)
 8003618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800361a:	4a23      	ldr	r2, [pc, #140]	; (80036a8 <HAL_RCC_OscConfig+0x500>)
 800361c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003620:	6353      	str	r3, [r2, #52]	; 0x34
 8003622:	4b21      	ldr	r3, [pc, #132]	; (80036a8 <HAL_RCC_OscConfig+0x500>)
 8003624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003626:	4a20      	ldr	r2, [pc, #128]	; (80036a8 <HAL_RCC_OscConfig+0x500>)
 8003628:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800362c:	6353      	str	r3, [r2, #52]	; 0x34
 800362e:	e01c      	b.n	800366a <HAL_RCC_OscConfig+0x4c2>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2b05      	cmp	r3, #5
 8003636:	d10c      	bne.n	8003652 <HAL_RCC_OscConfig+0x4aa>
 8003638:	4b1b      	ldr	r3, [pc, #108]	; (80036a8 <HAL_RCC_OscConfig+0x500>)
 800363a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363c:	4a1a      	ldr	r2, [pc, #104]	; (80036a8 <HAL_RCC_OscConfig+0x500>)
 800363e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003642:	6353      	str	r3, [r2, #52]	; 0x34
 8003644:	4b18      	ldr	r3, [pc, #96]	; (80036a8 <HAL_RCC_OscConfig+0x500>)
 8003646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003648:	4a17      	ldr	r2, [pc, #92]	; (80036a8 <HAL_RCC_OscConfig+0x500>)
 800364a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800364e:	6353      	str	r3, [r2, #52]	; 0x34
 8003650:	e00b      	b.n	800366a <HAL_RCC_OscConfig+0x4c2>
 8003652:	4b15      	ldr	r3, [pc, #84]	; (80036a8 <HAL_RCC_OscConfig+0x500>)
 8003654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003656:	4a14      	ldr	r2, [pc, #80]	; (80036a8 <HAL_RCC_OscConfig+0x500>)
 8003658:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800365c:	6353      	str	r3, [r2, #52]	; 0x34
 800365e:	4b12      	ldr	r3, [pc, #72]	; (80036a8 <HAL_RCC_OscConfig+0x500>)
 8003660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003662:	4a11      	ldr	r2, [pc, #68]	; (80036a8 <HAL_RCC_OscConfig+0x500>)
 8003664:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003668:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d015      	beq.n	800369e <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003672:	f7fe fa1f 	bl	8001ab4 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003678:	e00a      	b.n	8003690 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800367a:	f7fe fa1b 	bl	8001ab4 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	f241 3288 	movw	r2, #5000	; 0x1388
 8003688:	4293      	cmp	r3, r2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e0b2      	b.n	80037f6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003690:	4b05      	ldr	r3, [pc, #20]	; (80036a8 <HAL_RCC_OscConfig+0x500>)
 8003692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003694:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0ee      	beq.n	800367a <HAL_RCC_OscConfig+0x4d2>
 800369c:	e023      	b.n	80036e6 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800369e:	f7fe fa09 	bl	8001ab4 <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036a4:	e019      	b.n	80036da <HAL_RCC_OscConfig+0x532>
 80036a6:	bf00      	nop
 80036a8:	40023800 	.word	0x40023800
 80036ac:	08004a7c 	.word	0x08004a7c
 80036b0:	20000000 	.word	0x20000000
 80036b4:	20000004 	.word	0x20000004
 80036b8:	42470020 	.word	0x42470020
 80036bc:	42470680 	.word	0x42470680
 80036c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036c4:	f7fe f9f6 	bl	8001ab4 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e08d      	b.n	80037f6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036da:	4b49      	ldr	r3, [pc, #292]	; (8003800 <HAL_RCC_OscConfig+0x658>)
 80036dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1ee      	bne.n	80036c4 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036e6:	7ffb      	ldrb	r3, [r7, #31]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d105      	bne.n	80036f8 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ec:	4b44      	ldr	r3, [pc, #272]	; (8003800 <HAL_RCC_OscConfig+0x658>)
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	4a43      	ldr	r2, [pc, #268]	; (8003800 <HAL_RCC_OscConfig+0x658>)
 80036f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036f6:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d079      	beq.n	80037f4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	2b0c      	cmp	r3, #12
 8003704:	d056      	beq.n	80037b4 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	2b02      	cmp	r3, #2
 800370c:	d13b      	bne.n	8003786 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800370e:	4b3d      	ldr	r3, [pc, #244]	; (8003804 <HAL_RCC_OscConfig+0x65c>)
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003714:	f7fe f9ce 	bl	8001ab4 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800371c:	f7fe f9ca 	bl	8001ab4 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e063      	b.n	80037f6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800372e:	4b34      	ldr	r3, [pc, #208]	; (8003800 <HAL_RCC_OscConfig+0x658>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800373a:	4b31      	ldr	r3, [pc, #196]	; (8003800 <HAL_RCC_OscConfig+0x658>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374a:	4319      	orrs	r1, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003750:	430b      	orrs	r3, r1
 8003752:	492b      	ldr	r1, [pc, #172]	; (8003800 <HAL_RCC_OscConfig+0x658>)
 8003754:	4313      	orrs	r3, r2
 8003756:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003758:	4b2a      	ldr	r3, [pc, #168]	; (8003804 <HAL_RCC_OscConfig+0x65c>)
 800375a:	2201      	movs	r2, #1
 800375c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375e:	f7fe f9a9 	bl	8001ab4 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003766:	f7fe f9a5 	bl	8001ab4 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e03e      	b.n	80037f6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003778:	4b21      	ldr	r3, [pc, #132]	; (8003800 <HAL_RCC_OscConfig+0x658>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f0      	beq.n	8003766 <HAL_RCC_OscConfig+0x5be>
 8003784:	e036      	b.n	80037f4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003786:	4b1f      	ldr	r3, [pc, #124]	; (8003804 <HAL_RCC_OscConfig+0x65c>)
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7fe f992 	bl	8001ab4 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003794:	f7fe f98e 	bl	8001ab4 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e027      	b.n	80037f6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037a6:	4b16      	ldr	r3, [pc, #88]	; (8003800 <HAL_RCC_OscConfig+0x658>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f0      	bne.n	8003794 <HAL_RCC_OscConfig+0x5ec>
 80037b2:	e01f      	b.n	80037f4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e01a      	b.n	80037f6 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037c0:	4b0f      	ldr	r3, [pc, #60]	; (8003800 <HAL_RCC_OscConfig+0x658>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d10d      	bne.n	80037f0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037de:	429a      	cmp	r2, r3
 80037e0:	d106      	bne.n	80037f0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d001      	beq.n	80037f4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e000      	b.n	80037f6 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3720      	adds	r7, #32
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40023800 	.word	0x40023800
 8003804:	42470060 	.word	0x42470060

08003808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e11a      	b.n	8003a52 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800381c:	4b8f      	ldr	r3, [pc, #572]	; (8003a5c <HAL_RCC_ClockConfig+0x254>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d919      	bls.n	800385e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d105      	bne.n	800383c <HAL_RCC_ClockConfig+0x34>
 8003830:	4b8a      	ldr	r3, [pc, #552]	; (8003a5c <HAL_RCC_ClockConfig+0x254>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a89      	ldr	r2, [pc, #548]	; (8003a5c <HAL_RCC_ClockConfig+0x254>)
 8003836:	f043 0304 	orr.w	r3, r3, #4
 800383a:	6013      	str	r3, [r2, #0]
 800383c:	4b87      	ldr	r3, [pc, #540]	; (8003a5c <HAL_RCC_ClockConfig+0x254>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f023 0201 	bic.w	r2, r3, #1
 8003844:	4985      	ldr	r1, [pc, #532]	; (8003a5c <HAL_RCC_ClockConfig+0x254>)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	4313      	orrs	r3, r2
 800384a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800384c:	4b83      	ldr	r3, [pc, #524]	; (8003a5c <HAL_RCC_ClockConfig+0x254>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d001      	beq.n	800385e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e0f9      	b.n	8003a52 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d008      	beq.n	800387c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800386a:	4b7d      	ldr	r3, [pc, #500]	; (8003a60 <HAL_RCC_ClockConfig+0x258>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	497a      	ldr	r1, [pc, #488]	; (8003a60 <HAL_RCC_ClockConfig+0x258>)
 8003878:	4313      	orrs	r3, r2
 800387a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 808e 	beq.w	80039a6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d107      	bne.n	80038a2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003892:	4b73      	ldr	r3, [pc, #460]	; (8003a60 <HAL_RCC_ClockConfig+0x258>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d121      	bne.n	80038e2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e0d7      	b.n	8003a52 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2b03      	cmp	r3, #3
 80038a8:	d107      	bne.n	80038ba <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038aa:	4b6d      	ldr	r3, [pc, #436]	; (8003a60 <HAL_RCC_ClockConfig+0x258>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d115      	bne.n	80038e2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e0cb      	b.n	8003a52 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d107      	bne.n	80038d2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038c2:	4b67      	ldr	r3, [pc, #412]	; (8003a60 <HAL_RCC_ClockConfig+0x258>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d109      	bne.n	80038e2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e0bf      	b.n	8003a52 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80038d2:	4b63      	ldr	r3, [pc, #396]	; (8003a60 <HAL_RCC_ClockConfig+0x258>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e0b7      	b.n	8003a52 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038e2:	4b5f      	ldr	r3, [pc, #380]	; (8003a60 <HAL_RCC_ClockConfig+0x258>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f023 0203 	bic.w	r2, r3, #3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	495c      	ldr	r1, [pc, #368]	; (8003a60 <HAL_RCC_ClockConfig+0x258>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038f4:	f7fe f8de 	bl	8001ab4 <HAL_GetTick>
 80038f8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d112      	bne.n	8003928 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003902:	e00a      	b.n	800391a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003904:	f7fe f8d6 	bl	8001ab4 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003912:	4293      	cmp	r3, r2
 8003914:	d901      	bls.n	800391a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e09b      	b.n	8003a52 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800391a:	4b51      	ldr	r3, [pc, #324]	; (8003a60 <HAL_RCC_ClockConfig+0x258>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 030c 	and.w	r3, r3, #12
 8003922:	2b08      	cmp	r3, #8
 8003924:	d1ee      	bne.n	8003904 <HAL_RCC_ClockConfig+0xfc>
 8003926:	e03e      	b.n	80039a6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	2b03      	cmp	r3, #3
 800392e:	d112      	bne.n	8003956 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003930:	e00a      	b.n	8003948 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003932:	f7fe f8bf 	bl	8001ab4 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003940:	4293      	cmp	r3, r2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e084      	b.n	8003a52 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003948:	4b45      	ldr	r3, [pc, #276]	; (8003a60 <HAL_RCC_ClockConfig+0x258>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 030c 	and.w	r3, r3, #12
 8003950:	2b0c      	cmp	r3, #12
 8003952:	d1ee      	bne.n	8003932 <HAL_RCC_ClockConfig+0x12a>
 8003954:	e027      	b.n	80039a6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d11d      	bne.n	800399a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800395e:	e00a      	b.n	8003976 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003960:	f7fe f8a8 	bl	8001ab4 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	f241 3288 	movw	r2, #5000	; 0x1388
 800396e:	4293      	cmp	r3, r2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e06d      	b.n	8003a52 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003976:	4b3a      	ldr	r3, [pc, #232]	; (8003a60 <HAL_RCC_ClockConfig+0x258>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 030c 	and.w	r3, r3, #12
 800397e:	2b04      	cmp	r3, #4
 8003980:	d1ee      	bne.n	8003960 <HAL_RCC_ClockConfig+0x158>
 8003982:	e010      	b.n	80039a6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003984:	f7fe f896 	bl	8001ab4 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003992:	4293      	cmp	r3, r2
 8003994:	d901      	bls.n	800399a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e05b      	b.n	8003a52 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800399a:	4b31      	ldr	r3, [pc, #196]	; (8003a60 <HAL_RCC_ClockConfig+0x258>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f003 030c 	and.w	r3, r3, #12
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1ee      	bne.n	8003984 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039a6:	4b2d      	ldr	r3, [pc, #180]	; (8003a5c <HAL_RCC_ClockConfig+0x254>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d219      	bcs.n	80039e8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d105      	bne.n	80039c6 <HAL_RCC_ClockConfig+0x1be>
 80039ba:	4b28      	ldr	r3, [pc, #160]	; (8003a5c <HAL_RCC_ClockConfig+0x254>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a27      	ldr	r2, [pc, #156]	; (8003a5c <HAL_RCC_ClockConfig+0x254>)
 80039c0:	f043 0304 	orr.w	r3, r3, #4
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	4b25      	ldr	r3, [pc, #148]	; (8003a5c <HAL_RCC_ClockConfig+0x254>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f023 0201 	bic.w	r2, r3, #1
 80039ce:	4923      	ldr	r1, [pc, #140]	; (8003a5c <HAL_RCC_ClockConfig+0x254>)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d6:	4b21      	ldr	r3, [pc, #132]	; (8003a5c <HAL_RCC_ClockConfig+0x254>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d001      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e034      	b.n	8003a52 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d008      	beq.n	8003a06 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039f4:	4b1a      	ldr	r3, [pc, #104]	; (8003a60 <HAL_RCC_ClockConfig+0x258>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	4917      	ldr	r1, [pc, #92]	; (8003a60 <HAL_RCC_ClockConfig+0x258>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d009      	beq.n	8003a26 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a12:	4b13      	ldr	r3, [pc, #76]	; (8003a60 <HAL_RCC_ClockConfig+0x258>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	490f      	ldr	r1, [pc, #60]	; (8003a60 <HAL_RCC_ClockConfig+0x258>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a26:	f000 f823 	bl	8003a70 <HAL_RCC_GetSysClockFreq>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	4b0c      	ldr	r3, [pc, #48]	; (8003a60 <HAL_RCC_ClockConfig+0x258>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	091b      	lsrs	r3, r3, #4
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	490b      	ldr	r1, [pc, #44]	; (8003a64 <HAL_RCC_ClockConfig+0x25c>)
 8003a38:	5ccb      	ldrb	r3, [r1, r3]
 8003a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a3e:	4a0a      	ldr	r2, [pc, #40]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 8003a40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a42:	4b0a      	ldr	r3, [pc, #40]	; (8003a6c <HAL_RCC_ClockConfig+0x264>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fd ffe8 	bl	8001a1c <HAL_InitTick>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a50:	7afb      	ldrb	r3, [r7, #11]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40023c00 	.word	0x40023c00
 8003a60:	40023800 	.word	0x40023800
 8003a64:	08004a7c 	.word	0x08004a7c
 8003a68:	20000000 	.word	0x20000000
 8003a6c:	20000004 	.word	0x20000004

08003a70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a70:	b5b0      	push	{r4, r5, r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003a76:	4b61      	ldr	r3, [pc, #388]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x18c>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f003 030c 	and.w	r3, r3, #12
 8003a82:	2b0c      	cmp	r3, #12
 8003a84:	d00d      	beq.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x32>
 8003a86:	2b0c      	cmp	r3, #12
 8003a88:	f200 80a4 	bhi.w	8003bd4 <HAL_RCC_GetSysClockFreq+0x164>
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d002      	beq.n	8003a96 <HAL_RCC_GetSysClockFreq+0x26>
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d003      	beq.n	8003a9c <HAL_RCC_GetSysClockFreq+0x2c>
 8003a94:	e09e      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a96:	4b5a      	ldr	r3, [pc, #360]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x190>)
 8003a98:	613b      	str	r3, [r7, #16]
      break;
 8003a9a:	e0a9      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a9c:	4b59      	ldr	r3, [pc, #356]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x194>)
 8003a9e:	613b      	str	r3, [r7, #16]
      break;
 8003aa0:	e0a6      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	0c9b      	lsrs	r3, r3, #18
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	4a57      	ldr	r2, [pc, #348]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x198>)
 8003aac:	5cd3      	ldrb	r3, [r2, r3]
 8003aae:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	0d9b      	lsrs	r3, r3, #22
 8003ab4:	f003 0303 	and.w	r3, r3, #3
 8003ab8:	3301      	adds	r3, #1
 8003aba:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003abc:	4b4f      	ldr	r3, [pc, #316]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x18c>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d041      	beq.n	8003b4c <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	461c      	mov	r4, r3
 8003acc:	f04f 0500 	mov.w	r5, #0
 8003ad0:	4620      	mov	r0, r4
 8003ad2:	4629      	mov	r1, r5
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	f04f 0300 	mov.w	r3, #0
 8003adc:	014b      	lsls	r3, r1, #5
 8003ade:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ae2:	0142      	lsls	r2, r0, #5
 8003ae4:	4610      	mov	r0, r2
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	1b00      	subs	r0, r0, r4
 8003aea:	eb61 0105 	sbc.w	r1, r1, r5
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	018b      	lsls	r3, r1, #6
 8003af8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003afc:	0182      	lsls	r2, r0, #6
 8003afe:	1a12      	subs	r2, r2, r0
 8003b00:	eb63 0301 	sbc.w	r3, r3, r1
 8003b04:	f04f 0000 	mov.w	r0, #0
 8003b08:	f04f 0100 	mov.w	r1, #0
 8003b0c:	00d9      	lsls	r1, r3, #3
 8003b0e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b12:	00d0      	lsls	r0, r2, #3
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	1912      	adds	r2, r2, r4
 8003b1a:	eb45 0303 	adc.w	r3, r5, r3
 8003b1e:	f04f 0000 	mov.w	r0, #0
 8003b22:	f04f 0100 	mov.w	r1, #0
 8003b26:	0259      	lsls	r1, r3, #9
 8003b28:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003b2c:	0250      	lsls	r0, r2, #9
 8003b2e:	4602      	mov	r2, r0
 8003b30:	460b      	mov	r3, r1
 8003b32:	4610      	mov	r0, r2
 8003b34:	4619      	mov	r1, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	f04f 0300 	mov.w	r3, #0
 8003b3e:	f7fd f91f 	bl	8000d80 <__aeabi_uldivmod>
 8003b42:	4602      	mov	r2, r0
 8003b44:	460b      	mov	r3, r1
 8003b46:	4613      	mov	r3, r2
 8003b48:	617b      	str	r3, [r7, #20]
 8003b4a:	e040      	b.n	8003bce <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	461c      	mov	r4, r3
 8003b50:	f04f 0500 	mov.w	r5, #0
 8003b54:	4620      	mov	r0, r4
 8003b56:	4629      	mov	r1, r5
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	f04f 0300 	mov.w	r3, #0
 8003b60:	014b      	lsls	r3, r1, #5
 8003b62:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b66:	0142      	lsls	r2, r0, #5
 8003b68:	4610      	mov	r0, r2
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	1b00      	subs	r0, r0, r4
 8003b6e:	eb61 0105 	sbc.w	r1, r1, r5
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	018b      	lsls	r3, r1, #6
 8003b7c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b80:	0182      	lsls	r2, r0, #6
 8003b82:	1a12      	subs	r2, r2, r0
 8003b84:	eb63 0301 	sbc.w	r3, r3, r1
 8003b88:	f04f 0000 	mov.w	r0, #0
 8003b8c:	f04f 0100 	mov.w	r1, #0
 8003b90:	00d9      	lsls	r1, r3, #3
 8003b92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b96:	00d0      	lsls	r0, r2, #3
 8003b98:	4602      	mov	r2, r0
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	1912      	adds	r2, r2, r4
 8003b9e:	eb45 0303 	adc.w	r3, r5, r3
 8003ba2:	f04f 0000 	mov.w	r0, #0
 8003ba6:	f04f 0100 	mov.w	r1, #0
 8003baa:	0299      	lsls	r1, r3, #10
 8003bac:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003bb0:	0290      	lsls	r0, r2, #10
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	4610      	mov	r0, r2
 8003bb8:	4619      	mov	r1, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	f04f 0300 	mov.w	r3, #0
 8003bc2:	f7fd f8dd 	bl	8000d80 <__aeabi_uldivmod>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	460b      	mov	r3, r1
 8003bca:	4613      	mov	r3, r2
 8003bcc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	613b      	str	r3, [r7, #16]
      break;
 8003bd2:	e00d      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003bd4:	4b09      	ldr	r3, [pc, #36]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x18c>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	0b5b      	lsrs	r3, r3, #13
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	3301      	adds	r3, #1
 8003be4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	613b      	str	r3, [r7, #16]
      break;
 8003bee:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bf0:	693b      	ldr	r3, [r7, #16]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3718      	adds	r7, #24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bdb0      	pop	{r4, r5, r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	00f42400 	.word	0x00f42400
 8003c04:	007a1200 	.word	0x007a1200
 8003c08:	08004a70 	.word	0x08004a70

08003c0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c10:	4b02      	ldr	r3, [pc, #8]	; (8003c1c <HAL_RCC_GetHCLKFreq+0x10>)
 8003c12:	681b      	ldr	r3, [r3, #0]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bc80      	pop	{r7}
 8003c1a:	4770      	bx	lr
 8003c1c:	20000000 	.word	0x20000000

08003c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c24:	f7ff fff2 	bl	8003c0c <HAL_RCC_GetHCLKFreq>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	0a1b      	lsrs	r3, r3, #8
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	4903      	ldr	r1, [pc, #12]	; (8003c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c36:	5ccb      	ldrb	r3, [r1, r3]
 8003c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40023800 	.word	0x40023800
 8003c44:	08004a8c 	.word	0x08004a8c

08003c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c4c:	f7ff ffde 	bl	8003c0c <HAL_RCC_GetHCLKFreq>
 8003c50:	4602      	mov	r2, r0
 8003c52:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	0adb      	lsrs	r3, r3, #11
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	4903      	ldr	r1, [pc, #12]	; (8003c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c5e:	5ccb      	ldrb	r3, [r1, r3]
 8003c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	08004a8c 	.word	0x08004a8c

08003c70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c78:	2300      	movs	r3, #0
 8003c7a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003c7c:	4b29      	ldr	r3, [pc, #164]	; (8003d24 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d12c      	bne.n	8003ce2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c88:	4b26      	ldr	r3, [pc, #152]	; (8003d24 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d005      	beq.n	8003ca0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003c94:	4b24      	ldr	r3, [pc, #144]	; (8003d28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003c9c:	617b      	str	r3, [r7, #20]
 8003c9e:	e016      	b.n	8003cce <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca0:	4b20      	ldr	r3, [pc, #128]	; (8003d24 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	4a1f      	ldr	r2, [pc, #124]	; (8003d24 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003caa:	6253      	str	r3, [r2, #36]	; 0x24
 8003cac:	4b1d      	ldr	r3, [pc, #116]	; (8003d24 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003cb8:	4b1b      	ldr	r3, [pc, #108]	; (8003d28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003cc0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cc2:	4b18      	ldr	r3, [pc, #96]	; (8003d24 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	4a17      	ldr	r2, [pc, #92]	; (8003d24 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003cc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ccc:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003cd4:	d105      	bne.n	8003ce2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003cdc:	d101      	bne.n	8003ce2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003cde:	2301      	movs	r3, #1
 8003ce0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d105      	bne.n	8003cf4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003ce8:	4b10      	ldr	r3, [pc, #64]	; (8003d2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a0f      	ldr	r2, [pc, #60]	; (8003d2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cee:	f043 0304 	orr.w	r3, r3, #4
 8003cf2:	6013      	str	r3, [r2, #0]
 8003cf4:	4b0d      	ldr	r3, [pc, #52]	; (8003d2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f023 0201 	bic.w	r2, r3, #1
 8003cfc:	490b      	ldr	r1, [pc, #44]	; (8003d2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d04:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d001      	beq.n	8003d16 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e000      	b.n	8003d18 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	371c      	adds	r7, #28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bc80      	pop	{r7}
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	40023800 	.word	0x40023800
 8003d28:	40007000 	.word	0x40007000
 8003d2c:	40023c00 	.word	0x40023c00

08003d30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e03f      	b.n	8003dc2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d106      	bne.n	8003d5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7fd fdde 	bl	8001918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2224      	movs	r2, #36	; 0x24
 8003d60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f90b 	bl	8003f90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	695a      	ldr	r2, [r3, #20]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68da      	ldr	r2, [r3, #12]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003da8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b088      	sub	sp, #32
 8003dce:	af02      	add	r7, sp, #8
 8003dd0:	60f8      	str	r0, [r7, #12]
 8003dd2:	60b9      	str	r1, [r7, #8]
 8003dd4:	603b      	str	r3, [r7, #0]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b20      	cmp	r3, #32
 8003de8:	f040 8083 	bne.w	8003ef2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d002      	beq.n	8003df8 <HAL_UART_Transmit+0x2e>
 8003df2:	88fb      	ldrh	r3, [r7, #6]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e07b      	b.n	8003ef4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d101      	bne.n	8003e0a <HAL_UART_Transmit+0x40>
 8003e06:	2302      	movs	r3, #2
 8003e08:	e074      	b.n	8003ef4 <HAL_UART_Transmit+0x12a>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2221      	movs	r2, #33	; 0x21
 8003e1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003e20:	f7fd fe48 	bl	8001ab4 <HAL_GetTick>
 8003e24:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	88fa      	ldrh	r2, [r7, #6]
 8003e2a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	88fa      	ldrh	r2, [r7, #6]
 8003e30:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003e3a:	e042      	b.n	8003ec2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	3b01      	subs	r3, #1
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e52:	d122      	bne.n	8003e9a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	2180      	movs	r1, #128	; 0x80
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 f84c 	bl	8003efc <UART_WaitOnFlagUntilTimeout>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e042      	b.n	8003ef4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	461a      	mov	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e80:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d103      	bne.n	8003e92 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	3302      	adds	r3, #2
 8003e8e:	60bb      	str	r3, [r7, #8]
 8003e90:	e017      	b.n	8003ec2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	3301      	adds	r3, #1
 8003e96:	60bb      	str	r3, [r7, #8]
 8003e98:	e013      	b.n	8003ec2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	2180      	movs	r1, #128	; 0x80
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 f829 	bl	8003efc <UART_WaitOnFlagUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e01f      	b.n	8003ef4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	1c5a      	adds	r2, r3, #1
 8003eb8:	60ba      	str	r2, [r7, #8]
 8003eba:	781a      	ldrb	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1b7      	bne.n	8003e3c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	2140      	movs	r1, #64	; 0x40
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 f810 	bl	8003efc <UART_WaitOnFlagUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e006      	b.n	8003ef4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	e000      	b.n	8003ef4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003ef2:	2302      	movs	r3, #2
  }
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3718      	adds	r7, #24
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	603b      	str	r3, [r7, #0]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f0c:	e02c      	b.n	8003f68 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f14:	d028      	beq.n	8003f68 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d007      	beq.n	8003f2c <UART_WaitOnFlagUntilTimeout+0x30>
 8003f1c:	f7fd fdca 	bl	8001ab4 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d21d      	bcs.n	8003f68 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f3a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	695a      	ldr	r2, [r3, #20]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0201 	bic.w	r2, r2, #1
 8003f4a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e00f      	b.n	8003f88 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	4013      	ands	r3, r2
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	bf0c      	ite	eq
 8003f78:	2301      	moveq	r3, #1
 8003f7a:	2300      	movne	r3, #0
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	461a      	mov	r2, r3
 8003f80:	79fb      	ldrb	r3, [r7, #7]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d0c3      	beq.n	8003f0e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68da      	ldr	r2, [r3, #12]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003fd0:	f023 030c 	bic.w	r3, r3, #12
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6812      	ldr	r2, [r2, #0]
 8003fd8:	68b9      	ldr	r1, [r7, #8]
 8003fda:	430b      	orrs	r3, r1
 8003fdc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	699a      	ldr	r2, [r3, #24]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a55      	ldr	r2, [pc, #340]	; (8004150 <UART_SetConfig+0x1c0>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d103      	bne.n	8004006 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ffe:	f7ff fe23 	bl	8003c48 <HAL_RCC_GetPCLK2Freq>
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	e002      	b.n	800400c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004006:	f7ff fe0b 	bl	8003c20 <HAL_RCC_GetPCLK1Freq>
 800400a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004014:	d14c      	bne.n	80040b0 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	4613      	mov	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	009a      	lsls	r2, r3, #2
 8004020:	441a      	add	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	fbb2 f3f3 	udiv	r3, r2, r3
 800402c:	4a49      	ldr	r2, [pc, #292]	; (8004154 <UART_SetConfig+0x1c4>)
 800402e:	fba2 2303 	umull	r2, r3, r2, r3
 8004032:	095b      	lsrs	r3, r3, #5
 8004034:	0119      	lsls	r1, r3, #4
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	4613      	mov	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	009a      	lsls	r2, r3, #2
 8004040:	441a      	add	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	fbb2 f2f3 	udiv	r2, r2, r3
 800404c:	4b41      	ldr	r3, [pc, #260]	; (8004154 <UART_SetConfig+0x1c4>)
 800404e:	fba3 0302 	umull	r0, r3, r3, r2
 8004052:	095b      	lsrs	r3, r3, #5
 8004054:	2064      	movs	r0, #100	; 0x64
 8004056:	fb00 f303 	mul.w	r3, r0, r3
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	3332      	adds	r3, #50	; 0x32
 8004060:	4a3c      	ldr	r2, [pc, #240]	; (8004154 <UART_SetConfig+0x1c4>)
 8004062:	fba2 2303 	umull	r2, r3, r2, r3
 8004066:	095b      	lsrs	r3, r3, #5
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800406e:	4419      	add	r1, r3
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	4613      	mov	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	009a      	lsls	r2, r3, #2
 800407a:	441a      	add	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	fbb2 f2f3 	udiv	r2, r2, r3
 8004086:	4b33      	ldr	r3, [pc, #204]	; (8004154 <UART_SetConfig+0x1c4>)
 8004088:	fba3 0302 	umull	r0, r3, r3, r2
 800408c:	095b      	lsrs	r3, r3, #5
 800408e:	2064      	movs	r0, #100	; 0x64
 8004090:	fb00 f303 	mul.w	r3, r0, r3
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	3332      	adds	r3, #50	; 0x32
 800409a:	4a2e      	ldr	r2, [pc, #184]	; (8004154 <UART_SetConfig+0x1c4>)
 800409c:	fba2 2303 	umull	r2, r3, r2, r3
 80040a0:	095b      	lsrs	r3, r3, #5
 80040a2:	f003 0207 	and.w	r2, r3, #7
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	440a      	add	r2, r1
 80040ac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040ae:	e04a      	b.n	8004146 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	4613      	mov	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	009a      	lsls	r2, r3, #2
 80040ba:	441a      	add	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c6:	4a23      	ldr	r2, [pc, #140]	; (8004154 <UART_SetConfig+0x1c4>)
 80040c8:	fba2 2303 	umull	r2, r3, r2, r3
 80040cc:	095b      	lsrs	r3, r3, #5
 80040ce:	0119      	lsls	r1, r3, #4
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	4613      	mov	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	009a      	lsls	r2, r3, #2
 80040da:	441a      	add	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80040e6:	4b1b      	ldr	r3, [pc, #108]	; (8004154 <UART_SetConfig+0x1c4>)
 80040e8:	fba3 0302 	umull	r0, r3, r3, r2
 80040ec:	095b      	lsrs	r3, r3, #5
 80040ee:	2064      	movs	r0, #100	; 0x64
 80040f0:	fb00 f303 	mul.w	r3, r0, r3
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	3332      	adds	r3, #50	; 0x32
 80040fa:	4a16      	ldr	r2, [pc, #88]	; (8004154 <UART_SetConfig+0x1c4>)
 80040fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004100:	095b      	lsrs	r3, r3, #5
 8004102:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004106:	4419      	add	r1, r3
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	4613      	mov	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4413      	add	r3, r2
 8004110:	009a      	lsls	r2, r3, #2
 8004112:	441a      	add	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	fbb2 f2f3 	udiv	r2, r2, r3
 800411e:	4b0d      	ldr	r3, [pc, #52]	; (8004154 <UART_SetConfig+0x1c4>)
 8004120:	fba3 0302 	umull	r0, r3, r3, r2
 8004124:	095b      	lsrs	r3, r3, #5
 8004126:	2064      	movs	r0, #100	; 0x64
 8004128:	fb00 f303 	mul.w	r3, r0, r3
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	3332      	adds	r3, #50	; 0x32
 8004132:	4a08      	ldr	r2, [pc, #32]	; (8004154 <UART_SetConfig+0x1c4>)
 8004134:	fba2 2303 	umull	r2, r3, r2, r3
 8004138:	095b      	lsrs	r3, r3, #5
 800413a:	f003 020f 	and.w	r2, r3, #15
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	440a      	add	r2, r1
 8004144:	609a      	str	r2, [r3, #8]
}
 8004146:	bf00      	nop
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	40013800 	.word	0x40013800
 8004154:	51eb851f 	.word	0x51eb851f

08004158 <__errno>:
 8004158:	4b01      	ldr	r3, [pc, #4]	; (8004160 <__errno+0x8>)
 800415a:	6818      	ldr	r0, [r3, #0]
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	2000000c 	.word	0x2000000c

08004164 <__libc_init_array>:
 8004164:	b570      	push	{r4, r5, r6, lr}
 8004166:	2600      	movs	r6, #0
 8004168:	4d0c      	ldr	r5, [pc, #48]	; (800419c <__libc_init_array+0x38>)
 800416a:	4c0d      	ldr	r4, [pc, #52]	; (80041a0 <__libc_init_array+0x3c>)
 800416c:	1b64      	subs	r4, r4, r5
 800416e:	10a4      	asrs	r4, r4, #2
 8004170:	42a6      	cmp	r6, r4
 8004172:	d109      	bne.n	8004188 <__libc_init_array+0x24>
 8004174:	f000 fc5c 	bl	8004a30 <_init>
 8004178:	2600      	movs	r6, #0
 800417a:	4d0a      	ldr	r5, [pc, #40]	; (80041a4 <__libc_init_array+0x40>)
 800417c:	4c0a      	ldr	r4, [pc, #40]	; (80041a8 <__libc_init_array+0x44>)
 800417e:	1b64      	subs	r4, r4, r5
 8004180:	10a4      	asrs	r4, r4, #2
 8004182:	42a6      	cmp	r6, r4
 8004184:	d105      	bne.n	8004192 <__libc_init_array+0x2e>
 8004186:	bd70      	pop	{r4, r5, r6, pc}
 8004188:	f855 3b04 	ldr.w	r3, [r5], #4
 800418c:	4798      	blx	r3
 800418e:	3601      	adds	r6, #1
 8004190:	e7ee      	b.n	8004170 <__libc_init_array+0xc>
 8004192:	f855 3b04 	ldr.w	r3, [r5], #4
 8004196:	4798      	blx	r3
 8004198:	3601      	adds	r6, #1
 800419a:	e7f2      	b.n	8004182 <__libc_init_array+0x1e>
 800419c:	08004ad0 	.word	0x08004ad0
 80041a0:	08004ad0 	.word	0x08004ad0
 80041a4:	08004ad0 	.word	0x08004ad0
 80041a8:	08004ad4 	.word	0x08004ad4

080041ac <memset>:
 80041ac:	4603      	mov	r3, r0
 80041ae:	4402      	add	r2, r0
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d100      	bne.n	80041b6 <memset+0xa>
 80041b4:	4770      	bx	lr
 80041b6:	f803 1b01 	strb.w	r1, [r3], #1
 80041ba:	e7f9      	b.n	80041b0 <memset+0x4>

080041bc <siprintf>:
 80041bc:	b40e      	push	{r1, r2, r3}
 80041be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80041c2:	b500      	push	{lr}
 80041c4:	b09c      	sub	sp, #112	; 0x70
 80041c6:	ab1d      	add	r3, sp, #116	; 0x74
 80041c8:	9002      	str	r0, [sp, #8]
 80041ca:	9006      	str	r0, [sp, #24]
 80041cc:	9107      	str	r1, [sp, #28]
 80041ce:	9104      	str	r1, [sp, #16]
 80041d0:	4808      	ldr	r0, [pc, #32]	; (80041f4 <siprintf+0x38>)
 80041d2:	4909      	ldr	r1, [pc, #36]	; (80041f8 <siprintf+0x3c>)
 80041d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80041d8:	9105      	str	r1, [sp, #20]
 80041da:	6800      	ldr	r0, [r0, #0]
 80041dc:	a902      	add	r1, sp, #8
 80041de:	9301      	str	r3, [sp, #4]
 80041e0:	f000 f868 	bl	80042b4 <_svfiprintf_r>
 80041e4:	2200      	movs	r2, #0
 80041e6:	9b02      	ldr	r3, [sp, #8]
 80041e8:	701a      	strb	r2, [r3, #0]
 80041ea:	b01c      	add	sp, #112	; 0x70
 80041ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80041f0:	b003      	add	sp, #12
 80041f2:	4770      	bx	lr
 80041f4:	2000000c 	.word	0x2000000c
 80041f8:	ffff0208 	.word	0xffff0208

080041fc <__ssputs_r>:
 80041fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004200:	688e      	ldr	r6, [r1, #8]
 8004202:	4682      	mov	sl, r0
 8004204:	429e      	cmp	r6, r3
 8004206:	460c      	mov	r4, r1
 8004208:	4690      	mov	r8, r2
 800420a:	461f      	mov	r7, r3
 800420c:	d838      	bhi.n	8004280 <__ssputs_r+0x84>
 800420e:	898a      	ldrh	r2, [r1, #12]
 8004210:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004214:	d032      	beq.n	800427c <__ssputs_r+0x80>
 8004216:	6825      	ldr	r5, [r4, #0]
 8004218:	6909      	ldr	r1, [r1, #16]
 800421a:	3301      	adds	r3, #1
 800421c:	eba5 0901 	sub.w	r9, r5, r1
 8004220:	6965      	ldr	r5, [r4, #20]
 8004222:	444b      	add	r3, r9
 8004224:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004228:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800422c:	106d      	asrs	r5, r5, #1
 800422e:	429d      	cmp	r5, r3
 8004230:	bf38      	it	cc
 8004232:	461d      	movcc	r5, r3
 8004234:	0553      	lsls	r3, r2, #21
 8004236:	d531      	bpl.n	800429c <__ssputs_r+0xa0>
 8004238:	4629      	mov	r1, r5
 800423a:	f000 fb53 	bl	80048e4 <_malloc_r>
 800423e:	4606      	mov	r6, r0
 8004240:	b950      	cbnz	r0, 8004258 <__ssputs_r+0x5c>
 8004242:	230c      	movs	r3, #12
 8004244:	f04f 30ff 	mov.w	r0, #4294967295
 8004248:	f8ca 3000 	str.w	r3, [sl]
 800424c:	89a3      	ldrh	r3, [r4, #12]
 800424e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004252:	81a3      	strh	r3, [r4, #12]
 8004254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004258:	464a      	mov	r2, r9
 800425a:	6921      	ldr	r1, [r4, #16]
 800425c:	f000 face 	bl	80047fc <memcpy>
 8004260:	89a3      	ldrh	r3, [r4, #12]
 8004262:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800426a:	81a3      	strh	r3, [r4, #12]
 800426c:	6126      	str	r6, [r4, #16]
 800426e:	444e      	add	r6, r9
 8004270:	6026      	str	r6, [r4, #0]
 8004272:	463e      	mov	r6, r7
 8004274:	6165      	str	r5, [r4, #20]
 8004276:	eba5 0509 	sub.w	r5, r5, r9
 800427a:	60a5      	str	r5, [r4, #8]
 800427c:	42be      	cmp	r6, r7
 800427e:	d900      	bls.n	8004282 <__ssputs_r+0x86>
 8004280:	463e      	mov	r6, r7
 8004282:	4632      	mov	r2, r6
 8004284:	4641      	mov	r1, r8
 8004286:	6820      	ldr	r0, [r4, #0]
 8004288:	f000 fac6 	bl	8004818 <memmove>
 800428c:	68a3      	ldr	r3, [r4, #8]
 800428e:	6822      	ldr	r2, [r4, #0]
 8004290:	1b9b      	subs	r3, r3, r6
 8004292:	4432      	add	r2, r6
 8004294:	2000      	movs	r0, #0
 8004296:	60a3      	str	r3, [r4, #8]
 8004298:	6022      	str	r2, [r4, #0]
 800429a:	e7db      	b.n	8004254 <__ssputs_r+0x58>
 800429c:	462a      	mov	r2, r5
 800429e:	f000 fb7b 	bl	8004998 <_realloc_r>
 80042a2:	4606      	mov	r6, r0
 80042a4:	2800      	cmp	r0, #0
 80042a6:	d1e1      	bne.n	800426c <__ssputs_r+0x70>
 80042a8:	4650      	mov	r0, sl
 80042aa:	6921      	ldr	r1, [r4, #16]
 80042ac:	f000 face 	bl	800484c <_free_r>
 80042b0:	e7c7      	b.n	8004242 <__ssputs_r+0x46>
	...

080042b4 <_svfiprintf_r>:
 80042b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042b8:	4698      	mov	r8, r3
 80042ba:	898b      	ldrh	r3, [r1, #12]
 80042bc:	4607      	mov	r7, r0
 80042be:	061b      	lsls	r3, r3, #24
 80042c0:	460d      	mov	r5, r1
 80042c2:	4614      	mov	r4, r2
 80042c4:	b09d      	sub	sp, #116	; 0x74
 80042c6:	d50e      	bpl.n	80042e6 <_svfiprintf_r+0x32>
 80042c8:	690b      	ldr	r3, [r1, #16]
 80042ca:	b963      	cbnz	r3, 80042e6 <_svfiprintf_r+0x32>
 80042cc:	2140      	movs	r1, #64	; 0x40
 80042ce:	f000 fb09 	bl	80048e4 <_malloc_r>
 80042d2:	6028      	str	r0, [r5, #0]
 80042d4:	6128      	str	r0, [r5, #16]
 80042d6:	b920      	cbnz	r0, 80042e2 <_svfiprintf_r+0x2e>
 80042d8:	230c      	movs	r3, #12
 80042da:	603b      	str	r3, [r7, #0]
 80042dc:	f04f 30ff 	mov.w	r0, #4294967295
 80042e0:	e0d1      	b.n	8004486 <_svfiprintf_r+0x1d2>
 80042e2:	2340      	movs	r3, #64	; 0x40
 80042e4:	616b      	str	r3, [r5, #20]
 80042e6:	2300      	movs	r3, #0
 80042e8:	9309      	str	r3, [sp, #36]	; 0x24
 80042ea:	2320      	movs	r3, #32
 80042ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042f0:	2330      	movs	r3, #48	; 0x30
 80042f2:	f04f 0901 	mov.w	r9, #1
 80042f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80042fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80044a0 <_svfiprintf_r+0x1ec>
 80042fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004302:	4623      	mov	r3, r4
 8004304:	469a      	mov	sl, r3
 8004306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800430a:	b10a      	cbz	r2, 8004310 <_svfiprintf_r+0x5c>
 800430c:	2a25      	cmp	r2, #37	; 0x25
 800430e:	d1f9      	bne.n	8004304 <_svfiprintf_r+0x50>
 8004310:	ebba 0b04 	subs.w	fp, sl, r4
 8004314:	d00b      	beq.n	800432e <_svfiprintf_r+0x7a>
 8004316:	465b      	mov	r3, fp
 8004318:	4622      	mov	r2, r4
 800431a:	4629      	mov	r1, r5
 800431c:	4638      	mov	r0, r7
 800431e:	f7ff ff6d 	bl	80041fc <__ssputs_r>
 8004322:	3001      	adds	r0, #1
 8004324:	f000 80aa 	beq.w	800447c <_svfiprintf_r+0x1c8>
 8004328:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800432a:	445a      	add	r2, fp
 800432c:	9209      	str	r2, [sp, #36]	; 0x24
 800432e:	f89a 3000 	ldrb.w	r3, [sl]
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 80a2 	beq.w	800447c <_svfiprintf_r+0x1c8>
 8004338:	2300      	movs	r3, #0
 800433a:	f04f 32ff 	mov.w	r2, #4294967295
 800433e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004342:	f10a 0a01 	add.w	sl, sl, #1
 8004346:	9304      	str	r3, [sp, #16]
 8004348:	9307      	str	r3, [sp, #28]
 800434a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800434e:	931a      	str	r3, [sp, #104]	; 0x68
 8004350:	4654      	mov	r4, sl
 8004352:	2205      	movs	r2, #5
 8004354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004358:	4851      	ldr	r0, [pc, #324]	; (80044a0 <_svfiprintf_r+0x1ec>)
 800435a:	f000 fa41 	bl	80047e0 <memchr>
 800435e:	9a04      	ldr	r2, [sp, #16]
 8004360:	b9d8      	cbnz	r0, 800439a <_svfiprintf_r+0xe6>
 8004362:	06d0      	lsls	r0, r2, #27
 8004364:	bf44      	itt	mi
 8004366:	2320      	movmi	r3, #32
 8004368:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800436c:	0711      	lsls	r1, r2, #28
 800436e:	bf44      	itt	mi
 8004370:	232b      	movmi	r3, #43	; 0x2b
 8004372:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004376:	f89a 3000 	ldrb.w	r3, [sl]
 800437a:	2b2a      	cmp	r3, #42	; 0x2a
 800437c:	d015      	beq.n	80043aa <_svfiprintf_r+0xf6>
 800437e:	4654      	mov	r4, sl
 8004380:	2000      	movs	r0, #0
 8004382:	f04f 0c0a 	mov.w	ip, #10
 8004386:	9a07      	ldr	r2, [sp, #28]
 8004388:	4621      	mov	r1, r4
 800438a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800438e:	3b30      	subs	r3, #48	; 0x30
 8004390:	2b09      	cmp	r3, #9
 8004392:	d94e      	bls.n	8004432 <_svfiprintf_r+0x17e>
 8004394:	b1b0      	cbz	r0, 80043c4 <_svfiprintf_r+0x110>
 8004396:	9207      	str	r2, [sp, #28]
 8004398:	e014      	b.n	80043c4 <_svfiprintf_r+0x110>
 800439a:	eba0 0308 	sub.w	r3, r0, r8
 800439e:	fa09 f303 	lsl.w	r3, r9, r3
 80043a2:	4313      	orrs	r3, r2
 80043a4:	46a2      	mov	sl, r4
 80043a6:	9304      	str	r3, [sp, #16]
 80043a8:	e7d2      	b.n	8004350 <_svfiprintf_r+0x9c>
 80043aa:	9b03      	ldr	r3, [sp, #12]
 80043ac:	1d19      	adds	r1, r3, #4
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	9103      	str	r1, [sp, #12]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	bfbb      	ittet	lt
 80043b6:	425b      	neglt	r3, r3
 80043b8:	f042 0202 	orrlt.w	r2, r2, #2
 80043bc:	9307      	strge	r3, [sp, #28]
 80043be:	9307      	strlt	r3, [sp, #28]
 80043c0:	bfb8      	it	lt
 80043c2:	9204      	strlt	r2, [sp, #16]
 80043c4:	7823      	ldrb	r3, [r4, #0]
 80043c6:	2b2e      	cmp	r3, #46	; 0x2e
 80043c8:	d10c      	bne.n	80043e4 <_svfiprintf_r+0x130>
 80043ca:	7863      	ldrb	r3, [r4, #1]
 80043cc:	2b2a      	cmp	r3, #42	; 0x2a
 80043ce:	d135      	bne.n	800443c <_svfiprintf_r+0x188>
 80043d0:	9b03      	ldr	r3, [sp, #12]
 80043d2:	3402      	adds	r4, #2
 80043d4:	1d1a      	adds	r2, r3, #4
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	9203      	str	r2, [sp, #12]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	bfb8      	it	lt
 80043de:	f04f 33ff 	movlt.w	r3, #4294967295
 80043e2:	9305      	str	r3, [sp, #20]
 80043e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80044b0 <_svfiprintf_r+0x1fc>
 80043e8:	2203      	movs	r2, #3
 80043ea:	4650      	mov	r0, sl
 80043ec:	7821      	ldrb	r1, [r4, #0]
 80043ee:	f000 f9f7 	bl	80047e0 <memchr>
 80043f2:	b140      	cbz	r0, 8004406 <_svfiprintf_r+0x152>
 80043f4:	2340      	movs	r3, #64	; 0x40
 80043f6:	eba0 000a 	sub.w	r0, r0, sl
 80043fa:	fa03 f000 	lsl.w	r0, r3, r0
 80043fe:	9b04      	ldr	r3, [sp, #16]
 8004400:	3401      	adds	r4, #1
 8004402:	4303      	orrs	r3, r0
 8004404:	9304      	str	r3, [sp, #16]
 8004406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800440a:	2206      	movs	r2, #6
 800440c:	4825      	ldr	r0, [pc, #148]	; (80044a4 <_svfiprintf_r+0x1f0>)
 800440e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004412:	f000 f9e5 	bl	80047e0 <memchr>
 8004416:	2800      	cmp	r0, #0
 8004418:	d038      	beq.n	800448c <_svfiprintf_r+0x1d8>
 800441a:	4b23      	ldr	r3, [pc, #140]	; (80044a8 <_svfiprintf_r+0x1f4>)
 800441c:	bb1b      	cbnz	r3, 8004466 <_svfiprintf_r+0x1b2>
 800441e:	9b03      	ldr	r3, [sp, #12]
 8004420:	3307      	adds	r3, #7
 8004422:	f023 0307 	bic.w	r3, r3, #7
 8004426:	3308      	adds	r3, #8
 8004428:	9303      	str	r3, [sp, #12]
 800442a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800442c:	4433      	add	r3, r6
 800442e:	9309      	str	r3, [sp, #36]	; 0x24
 8004430:	e767      	b.n	8004302 <_svfiprintf_r+0x4e>
 8004432:	460c      	mov	r4, r1
 8004434:	2001      	movs	r0, #1
 8004436:	fb0c 3202 	mla	r2, ip, r2, r3
 800443a:	e7a5      	b.n	8004388 <_svfiprintf_r+0xd4>
 800443c:	2300      	movs	r3, #0
 800443e:	f04f 0c0a 	mov.w	ip, #10
 8004442:	4619      	mov	r1, r3
 8004444:	3401      	adds	r4, #1
 8004446:	9305      	str	r3, [sp, #20]
 8004448:	4620      	mov	r0, r4
 800444a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800444e:	3a30      	subs	r2, #48	; 0x30
 8004450:	2a09      	cmp	r2, #9
 8004452:	d903      	bls.n	800445c <_svfiprintf_r+0x1a8>
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0c5      	beq.n	80043e4 <_svfiprintf_r+0x130>
 8004458:	9105      	str	r1, [sp, #20]
 800445a:	e7c3      	b.n	80043e4 <_svfiprintf_r+0x130>
 800445c:	4604      	mov	r4, r0
 800445e:	2301      	movs	r3, #1
 8004460:	fb0c 2101 	mla	r1, ip, r1, r2
 8004464:	e7f0      	b.n	8004448 <_svfiprintf_r+0x194>
 8004466:	ab03      	add	r3, sp, #12
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	462a      	mov	r2, r5
 800446c:	4638      	mov	r0, r7
 800446e:	4b0f      	ldr	r3, [pc, #60]	; (80044ac <_svfiprintf_r+0x1f8>)
 8004470:	a904      	add	r1, sp, #16
 8004472:	f3af 8000 	nop.w
 8004476:	1c42      	adds	r2, r0, #1
 8004478:	4606      	mov	r6, r0
 800447a:	d1d6      	bne.n	800442a <_svfiprintf_r+0x176>
 800447c:	89ab      	ldrh	r3, [r5, #12]
 800447e:	065b      	lsls	r3, r3, #25
 8004480:	f53f af2c 	bmi.w	80042dc <_svfiprintf_r+0x28>
 8004484:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004486:	b01d      	add	sp, #116	; 0x74
 8004488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800448c:	ab03      	add	r3, sp, #12
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	462a      	mov	r2, r5
 8004492:	4638      	mov	r0, r7
 8004494:	4b05      	ldr	r3, [pc, #20]	; (80044ac <_svfiprintf_r+0x1f8>)
 8004496:	a904      	add	r1, sp, #16
 8004498:	f000 f87c 	bl	8004594 <_printf_i>
 800449c:	e7eb      	b.n	8004476 <_svfiprintf_r+0x1c2>
 800449e:	bf00      	nop
 80044a0:	08004a94 	.word	0x08004a94
 80044a4:	08004a9e 	.word	0x08004a9e
 80044a8:	00000000 	.word	0x00000000
 80044ac:	080041fd 	.word	0x080041fd
 80044b0:	08004a9a 	.word	0x08004a9a

080044b4 <_printf_common>:
 80044b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044b8:	4616      	mov	r6, r2
 80044ba:	4699      	mov	r9, r3
 80044bc:	688a      	ldr	r2, [r1, #8]
 80044be:	690b      	ldr	r3, [r1, #16]
 80044c0:	4607      	mov	r7, r0
 80044c2:	4293      	cmp	r3, r2
 80044c4:	bfb8      	it	lt
 80044c6:	4613      	movlt	r3, r2
 80044c8:	6033      	str	r3, [r6, #0]
 80044ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044ce:	460c      	mov	r4, r1
 80044d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044d4:	b10a      	cbz	r2, 80044da <_printf_common+0x26>
 80044d6:	3301      	adds	r3, #1
 80044d8:	6033      	str	r3, [r6, #0]
 80044da:	6823      	ldr	r3, [r4, #0]
 80044dc:	0699      	lsls	r1, r3, #26
 80044de:	bf42      	ittt	mi
 80044e0:	6833      	ldrmi	r3, [r6, #0]
 80044e2:	3302      	addmi	r3, #2
 80044e4:	6033      	strmi	r3, [r6, #0]
 80044e6:	6825      	ldr	r5, [r4, #0]
 80044e8:	f015 0506 	ands.w	r5, r5, #6
 80044ec:	d106      	bne.n	80044fc <_printf_common+0x48>
 80044ee:	f104 0a19 	add.w	sl, r4, #25
 80044f2:	68e3      	ldr	r3, [r4, #12]
 80044f4:	6832      	ldr	r2, [r6, #0]
 80044f6:	1a9b      	subs	r3, r3, r2
 80044f8:	42ab      	cmp	r3, r5
 80044fa:	dc28      	bgt.n	800454e <_printf_common+0x9a>
 80044fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004500:	1e13      	subs	r3, r2, #0
 8004502:	6822      	ldr	r2, [r4, #0]
 8004504:	bf18      	it	ne
 8004506:	2301      	movne	r3, #1
 8004508:	0692      	lsls	r2, r2, #26
 800450a:	d42d      	bmi.n	8004568 <_printf_common+0xb4>
 800450c:	4649      	mov	r1, r9
 800450e:	4638      	mov	r0, r7
 8004510:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004514:	47c0      	blx	r8
 8004516:	3001      	adds	r0, #1
 8004518:	d020      	beq.n	800455c <_printf_common+0xa8>
 800451a:	6823      	ldr	r3, [r4, #0]
 800451c:	68e5      	ldr	r5, [r4, #12]
 800451e:	f003 0306 	and.w	r3, r3, #6
 8004522:	2b04      	cmp	r3, #4
 8004524:	bf18      	it	ne
 8004526:	2500      	movne	r5, #0
 8004528:	6832      	ldr	r2, [r6, #0]
 800452a:	f04f 0600 	mov.w	r6, #0
 800452e:	68a3      	ldr	r3, [r4, #8]
 8004530:	bf08      	it	eq
 8004532:	1aad      	subeq	r5, r5, r2
 8004534:	6922      	ldr	r2, [r4, #16]
 8004536:	bf08      	it	eq
 8004538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800453c:	4293      	cmp	r3, r2
 800453e:	bfc4      	itt	gt
 8004540:	1a9b      	subgt	r3, r3, r2
 8004542:	18ed      	addgt	r5, r5, r3
 8004544:	341a      	adds	r4, #26
 8004546:	42b5      	cmp	r5, r6
 8004548:	d11a      	bne.n	8004580 <_printf_common+0xcc>
 800454a:	2000      	movs	r0, #0
 800454c:	e008      	b.n	8004560 <_printf_common+0xac>
 800454e:	2301      	movs	r3, #1
 8004550:	4652      	mov	r2, sl
 8004552:	4649      	mov	r1, r9
 8004554:	4638      	mov	r0, r7
 8004556:	47c0      	blx	r8
 8004558:	3001      	adds	r0, #1
 800455a:	d103      	bne.n	8004564 <_printf_common+0xb0>
 800455c:	f04f 30ff 	mov.w	r0, #4294967295
 8004560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004564:	3501      	adds	r5, #1
 8004566:	e7c4      	b.n	80044f2 <_printf_common+0x3e>
 8004568:	2030      	movs	r0, #48	; 0x30
 800456a:	18e1      	adds	r1, r4, r3
 800456c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004576:	4422      	add	r2, r4
 8004578:	3302      	adds	r3, #2
 800457a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800457e:	e7c5      	b.n	800450c <_printf_common+0x58>
 8004580:	2301      	movs	r3, #1
 8004582:	4622      	mov	r2, r4
 8004584:	4649      	mov	r1, r9
 8004586:	4638      	mov	r0, r7
 8004588:	47c0      	blx	r8
 800458a:	3001      	adds	r0, #1
 800458c:	d0e6      	beq.n	800455c <_printf_common+0xa8>
 800458e:	3601      	adds	r6, #1
 8004590:	e7d9      	b.n	8004546 <_printf_common+0x92>
	...

08004594 <_printf_i>:
 8004594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004598:	460c      	mov	r4, r1
 800459a:	7e27      	ldrb	r7, [r4, #24]
 800459c:	4691      	mov	r9, r2
 800459e:	2f78      	cmp	r7, #120	; 0x78
 80045a0:	4680      	mov	r8, r0
 80045a2:	469a      	mov	sl, r3
 80045a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80045a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045aa:	d807      	bhi.n	80045bc <_printf_i+0x28>
 80045ac:	2f62      	cmp	r7, #98	; 0x62
 80045ae:	d80a      	bhi.n	80045c6 <_printf_i+0x32>
 80045b0:	2f00      	cmp	r7, #0
 80045b2:	f000 80d9 	beq.w	8004768 <_printf_i+0x1d4>
 80045b6:	2f58      	cmp	r7, #88	; 0x58
 80045b8:	f000 80a4 	beq.w	8004704 <_printf_i+0x170>
 80045bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80045c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045c4:	e03a      	b.n	800463c <_printf_i+0xa8>
 80045c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045ca:	2b15      	cmp	r3, #21
 80045cc:	d8f6      	bhi.n	80045bc <_printf_i+0x28>
 80045ce:	a001      	add	r0, pc, #4	; (adr r0, 80045d4 <_printf_i+0x40>)
 80045d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80045d4:	0800462d 	.word	0x0800462d
 80045d8:	08004641 	.word	0x08004641
 80045dc:	080045bd 	.word	0x080045bd
 80045e0:	080045bd 	.word	0x080045bd
 80045e4:	080045bd 	.word	0x080045bd
 80045e8:	080045bd 	.word	0x080045bd
 80045ec:	08004641 	.word	0x08004641
 80045f0:	080045bd 	.word	0x080045bd
 80045f4:	080045bd 	.word	0x080045bd
 80045f8:	080045bd 	.word	0x080045bd
 80045fc:	080045bd 	.word	0x080045bd
 8004600:	0800474f 	.word	0x0800474f
 8004604:	08004671 	.word	0x08004671
 8004608:	08004731 	.word	0x08004731
 800460c:	080045bd 	.word	0x080045bd
 8004610:	080045bd 	.word	0x080045bd
 8004614:	08004771 	.word	0x08004771
 8004618:	080045bd 	.word	0x080045bd
 800461c:	08004671 	.word	0x08004671
 8004620:	080045bd 	.word	0x080045bd
 8004624:	080045bd 	.word	0x080045bd
 8004628:	08004739 	.word	0x08004739
 800462c:	680b      	ldr	r3, [r1, #0]
 800462e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004632:	1d1a      	adds	r2, r3, #4
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	600a      	str	r2, [r1, #0]
 8004638:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800463c:	2301      	movs	r3, #1
 800463e:	e0a4      	b.n	800478a <_printf_i+0x1f6>
 8004640:	6825      	ldr	r5, [r4, #0]
 8004642:	6808      	ldr	r0, [r1, #0]
 8004644:	062e      	lsls	r6, r5, #24
 8004646:	f100 0304 	add.w	r3, r0, #4
 800464a:	d50a      	bpl.n	8004662 <_printf_i+0xce>
 800464c:	6805      	ldr	r5, [r0, #0]
 800464e:	600b      	str	r3, [r1, #0]
 8004650:	2d00      	cmp	r5, #0
 8004652:	da03      	bge.n	800465c <_printf_i+0xc8>
 8004654:	232d      	movs	r3, #45	; 0x2d
 8004656:	426d      	negs	r5, r5
 8004658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800465c:	230a      	movs	r3, #10
 800465e:	485e      	ldr	r0, [pc, #376]	; (80047d8 <_printf_i+0x244>)
 8004660:	e019      	b.n	8004696 <_printf_i+0x102>
 8004662:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004666:	6805      	ldr	r5, [r0, #0]
 8004668:	600b      	str	r3, [r1, #0]
 800466a:	bf18      	it	ne
 800466c:	b22d      	sxthne	r5, r5
 800466e:	e7ef      	b.n	8004650 <_printf_i+0xbc>
 8004670:	680b      	ldr	r3, [r1, #0]
 8004672:	6825      	ldr	r5, [r4, #0]
 8004674:	1d18      	adds	r0, r3, #4
 8004676:	6008      	str	r0, [r1, #0]
 8004678:	0628      	lsls	r0, r5, #24
 800467a:	d501      	bpl.n	8004680 <_printf_i+0xec>
 800467c:	681d      	ldr	r5, [r3, #0]
 800467e:	e002      	b.n	8004686 <_printf_i+0xf2>
 8004680:	0669      	lsls	r1, r5, #25
 8004682:	d5fb      	bpl.n	800467c <_printf_i+0xe8>
 8004684:	881d      	ldrh	r5, [r3, #0]
 8004686:	2f6f      	cmp	r7, #111	; 0x6f
 8004688:	bf0c      	ite	eq
 800468a:	2308      	moveq	r3, #8
 800468c:	230a      	movne	r3, #10
 800468e:	4852      	ldr	r0, [pc, #328]	; (80047d8 <_printf_i+0x244>)
 8004690:	2100      	movs	r1, #0
 8004692:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004696:	6866      	ldr	r6, [r4, #4]
 8004698:	2e00      	cmp	r6, #0
 800469a:	bfa8      	it	ge
 800469c:	6821      	ldrge	r1, [r4, #0]
 800469e:	60a6      	str	r6, [r4, #8]
 80046a0:	bfa4      	itt	ge
 80046a2:	f021 0104 	bicge.w	r1, r1, #4
 80046a6:	6021      	strge	r1, [r4, #0]
 80046a8:	b90d      	cbnz	r5, 80046ae <_printf_i+0x11a>
 80046aa:	2e00      	cmp	r6, #0
 80046ac:	d04d      	beq.n	800474a <_printf_i+0x1b6>
 80046ae:	4616      	mov	r6, r2
 80046b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80046b4:	fb03 5711 	mls	r7, r3, r1, r5
 80046b8:	5dc7      	ldrb	r7, [r0, r7]
 80046ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80046be:	462f      	mov	r7, r5
 80046c0:	42bb      	cmp	r3, r7
 80046c2:	460d      	mov	r5, r1
 80046c4:	d9f4      	bls.n	80046b0 <_printf_i+0x11c>
 80046c6:	2b08      	cmp	r3, #8
 80046c8:	d10b      	bne.n	80046e2 <_printf_i+0x14e>
 80046ca:	6823      	ldr	r3, [r4, #0]
 80046cc:	07df      	lsls	r7, r3, #31
 80046ce:	d508      	bpl.n	80046e2 <_printf_i+0x14e>
 80046d0:	6923      	ldr	r3, [r4, #16]
 80046d2:	6861      	ldr	r1, [r4, #4]
 80046d4:	4299      	cmp	r1, r3
 80046d6:	bfde      	ittt	le
 80046d8:	2330      	movle	r3, #48	; 0x30
 80046da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80046e2:	1b92      	subs	r2, r2, r6
 80046e4:	6122      	str	r2, [r4, #16]
 80046e6:	464b      	mov	r3, r9
 80046e8:	4621      	mov	r1, r4
 80046ea:	4640      	mov	r0, r8
 80046ec:	f8cd a000 	str.w	sl, [sp]
 80046f0:	aa03      	add	r2, sp, #12
 80046f2:	f7ff fedf 	bl	80044b4 <_printf_common>
 80046f6:	3001      	adds	r0, #1
 80046f8:	d14c      	bne.n	8004794 <_printf_i+0x200>
 80046fa:	f04f 30ff 	mov.w	r0, #4294967295
 80046fe:	b004      	add	sp, #16
 8004700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004704:	4834      	ldr	r0, [pc, #208]	; (80047d8 <_printf_i+0x244>)
 8004706:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800470a:	680e      	ldr	r6, [r1, #0]
 800470c:	6823      	ldr	r3, [r4, #0]
 800470e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004712:	061f      	lsls	r7, r3, #24
 8004714:	600e      	str	r6, [r1, #0]
 8004716:	d514      	bpl.n	8004742 <_printf_i+0x1ae>
 8004718:	07d9      	lsls	r1, r3, #31
 800471a:	bf44      	itt	mi
 800471c:	f043 0320 	orrmi.w	r3, r3, #32
 8004720:	6023      	strmi	r3, [r4, #0]
 8004722:	b91d      	cbnz	r5, 800472c <_printf_i+0x198>
 8004724:	6823      	ldr	r3, [r4, #0]
 8004726:	f023 0320 	bic.w	r3, r3, #32
 800472a:	6023      	str	r3, [r4, #0]
 800472c:	2310      	movs	r3, #16
 800472e:	e7af      	b.n	8004690 <_printf_i+0xfc>
 8004730:	6823      	ldr	r3, [r4, #0]
 8004732:	f043 0320 	orr.w	r3, r3, #32
 8004736:	6023      	str	r3, [r4, #0]
 8004738:	2378      	movs	r3, #120	; 0x78
 800473a:	4828      	ldr	r0, [pc, #160]	; (80047dc <_printf_i+0x248>)
 800473c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004740:	e7e3      	b.n	800470a <_printf_i+0x176>
 8004742:	065e      	lsls	r6, r3, #25
 8004744:	bf48      	it	mi
 8004746:	b2ad      	uxthmi	r5, r5
 8004748:	e7e6      	b.n	8004718 <_printf_i+0x184>
 800474a:	4616      	mov	r6, r2
 800474c:	e7bb      	b.n	80046c6 <_printf_i+0x132>
 800474e:	680b      	ldr	r3, [r1, #0]
 8004750:	6826      	ldr	r6, [r4, #0]
 8004752:	1d1d      	adds	r5, r3, #4
 8004754:	6960      	ldr	r0, [r4, #20]
 8004756:	600d      	str	r5, [r1, #0]
 8004758:	0635      	lsls	r5, r6, #24
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	d501      	bpl.n	8004762 <_printf_i+0x1ce>
 800475e:	6018      	str	r0, [r3, #0]
 8004760:	e002      	b.n	8004768 <_printf_i+0x1d4>
 8004762:	0671      	lsls	r1, r6, #25
 8004764:	d5fb      	bpl.n	800475e <_printf_i+0x1ca>
 8004766:	8018      	strh	r0, [r3, #0]
 8004768:	2300      	movs	r3, #0
 800476a:	4616      	mov	r6, r2
 800476c:	6123      	str	r3, [r4, #16]
 800476e:	e7ba      	b.n	80046e6 <_printf_i+0x152>
 8004770:	680b      	ldr	r3, [r1, #0]
 8004772:	1d1a      	adds	r2, r3, #4
 8004774:	600a      	str	r2, [r1, #0]
 8004776:	681e      	ldr	r6, [r3, #0]
 8004778:	2100      	movs	r1, #0
 800477a:	4630      	mov	r0, r6
 800477c:	6862      	ldr	r2, [r4, #4]
 800477e:	f000 f82f 	bl	80047e0 <memchr>
 8004782:	b108      	cbz	r0, 8004788 <_printf_i+0x1f4>
 8004784:	1b80      	subs	r0, r0, r6
 8004786:	6060      	str	r0, [r4, #4]
 8004788:	6863      	ldr	r3, [r4, #4]
 800478a:	6123      	str	r3, [r4, #16]
 800478c:	2300      	movs	r3, #0
 800478e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004792:	e7a8      	b.n	80046e6 <_printf_i+0x152>
 8004794:	4632      	mov	r2, r6
 8004796:	4649      	mov	r1, r9
 8004798:	4640      	mov	r0, r8
 800479a:	6923      	ldr	r3, [r4, #16]
 800479c:	47d0      	blx	sl
 800479e:	3001      	adds	r0, #1
 80047a0:	d0ab      	beq.n	80046fa <_printf_i+0x166>
 80047a2:	6823      	ldr	r3, [r4, #0]
 80047a4:	079b      	lsls	r3, r3, #30
 80047a6:	d413      	bmi.n	80047d0 <_printf_i+0x23c>
 80047a8:	68e0      	ldr	r0, [r4, #12]
 80047aa:	9b03      	ldr	r3, [sp, #12]
 80047ac:	4298      	cmp	r0, r3
 80047ae:	bfb8      	it	lt
 80047b0:	4618      	movlt	r0, r3
 80047b2:	e7a4      	b.n	80046fe <_printf_i+0x16a>
 80047b4:	2301      	movs	r3, #1
 80047b6:	4632      	mov	r2, r6
 80047b8:	4649      	mov	r1, r9
 80047ba:	4640      	mov	r0, r8
 80047bc:	47d0      	blx	sl
 80047be:	3001      	adds	r0, #1
 80047c0:	d09b      	beq.n	80046fa <_printf_i+0x166>
 80047c2:	3501      	adds	r5, #1
 80047c4:	68e3      	ldr	r3, [r4, #12]
 80047c6:	9903      	ldr	r1, [sp, #12]
 80047c8:	1a5b      	subs	r3, r3, r1
 80047ca:	42ab      	cmp	r3, r5
 80047cc:	dcf2      	bgt.n	80047b4 <_printf_i+0x220>
 80047ce:	e7eb      	b.n	80047a8 <_printf_i+0x214>
 80047d0:	2500      	movs	r5, #0
 80047d2:	f104 0619 	add.w	r6, r4, #25
 80047d6:	e7f5      	b.n	80047c4 <_printf_i+0x230>
 80047d8:	08004aa5 	.word	0x08004aa5
 80047dc:	08004ab6 	.word	0x08004ab6

080047e0 <memchr>:
 80047e0:	4603      	mov	r3, r0
 80047e2:	b510      	push	{r4, lr}
 80047e4:	b2c9      	uxtb	r1, r1
 80047e6:	4402      	add	r2, r0
 80047e8:	4293      	cmp	r3, r2
 80047ea:	4618      	mov	r0, r3
 80047ec:	d101      	bne.n	80047f2 <memchr+0x12>
 80047ee:	2000      	movs	r0, #0
 80047f0:	e003      	b.n	80047fa <memchr+0x1a>
 80047f2:	7804      	ldrb	r4, [r0, #0]
 80047f4:	3301      	adds	r3, #1
 80047f6:	428c      	cmp	r4, r1
 80047f8:	d1f6      	bne.n	80047e8 <memchr+0x8>
 80047fa:	bd10      	pop	{r4, pc}

080047fc <memcpy>:
 80047fc:	440a      	add	r2, r1
 80047fe:	4291      	cmp	r1, r2
 8004800:	f100 33ff 	add.w	r3, r0, #4294967295
 8004804:	d100      	bne.n	8004808 <memcpy+0xc>
 8004806:	4770      	bx	lr
 8004808:	b510      	push	{r4, lr}
 800480a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800480e:	4291      	cmp	r1, r2
 8004810:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004814:	d1f9      	bne.n	800480a <memcpy+0xe>
 8004816:	bd10      	pop	{r4, pc}

08004818 <memmove>:
 8004818:	4288      	cmp	r0, r1
 800481a:	b510      	push	{r4, lr}
 800481c:	eb01 0402 	add.w	r4, r1, r2
 8004820:	d902      	bls.n	8004828 <memmove+0x10>
 8004822:	4284      	cmp	r4, r0
 8004824:	4623      	mov	r3, r4
 8004826:	d807      	bhi.n	8004838 <memmove+0x20>
 8004828:	1e43      	subs	r3, r0, #1
 800482a:	42a1      	cmp	r1, r4
 800482c:	d008      	beq.n	8004840 <memmove+0x28>
 800482e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004832:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004836:	e7f8      	b.n	800482a <memmove+0x12>
 8004838:	4601      	mov	r1, r0
 800483a:	4402      	add	r2, r0
 800483c:	428a      	cmp	r2, r1
 800483e:	d100      	bne.n	8004842 <memmove+0x2a>
 8004840:	bd10      	pop	{r4, pc}
 8004842:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004846:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800484a:	e7f7      	b.n	800483c <memmove+0x24>

0800484c <_free_r>:
 800484c:	b538      	push	{r3, r4, r5, lr}
 800484e:	4605      	mov	r5, r0
 8004850:	2900      	cmp	r1, #0
 8004852:	d043      	beq.n	80048dc <_free_r+0x90>
 8004854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004858:	1f0c      	subs	r4, r1, #4
 800485a:	2b00      	cmp	r3, #0
 800485c:	bfb8      	it	lt
 800485e:	18e4      	addlt	r4, r4, r3
 8004860:	f000 f8d0 	bl	8004a04 <__malloc_lock>
 8004864:	4a1e      	ldr	r2, [pc, #120]	; (80048e0 <_free_r+0x94>)
 8004866:	6813      	ldr	r3, [r2, #0]
 8004868:	4610      	mov	r0, r2
 800486a:	b933      	cbnz	r3, 800487a <_free_r+0x2e>
 800486c:	6063      	str	r3, [r4, #4]
 800486e:	6014      	str	r4, [r2, #0]
 8004870:	4628      	mov	r0, r5
 8004872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004876:	f000 b8cb 	b.w	8004a10 <__malloc_unlock>
 800487a:	42a3      	cmp	r3, r4
 800487c:	d90a      	bls.n	8004894 <_free_r+0x48>
 800487e:	6821      	ldr	r1, [r4, #0]
 8004880:	1862      	adds	r2, r4, r1
 8004882:	4293      	cmp	r3, r2
 8004884:	bf01      	itttt	eq
 8004886:	681a      	ldreq	r2, [r3, #0]
 8004888:	685b      	ldreq	r3, [r3, #4]
 800488a:	1852      	addeq	r2, r2, r1
 800488c:	6022      	streq	r2, [r4, #0]
 800488e:	6063      	str	r3, [r4, #4]
 8004890:	6004      	str	r4, [r0, #0]
 8004892:	e7ed      	b.n	8004870 <_free_r+0x24>
 8004894:	461a      	mov	r2, r3
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	b10b      	cbz	r3, 800489e <_free_r+0x52>
 800489a:	42a3      	cmp	r3, r4
 800489c:	d9fa      	bls.n	8004894 <_free_r+0x48>
 800489e:	6811      	ldr	r1, [r2, #0]
 80048a0:	1850      	adds	r0, r2, r1
 80048a2:	42a0      	cmp	r0, r4
 80048a4:	d10b      	bne.n	80048be <_free_r+0x72>
 80048a6:	6820      	ldr	r0, [r4, #0]
 80048a8:	4401      	add	r1, r0
 80048aa:	1850      	adds	r0, r2, r1
 80048ac:	4283      	cmp	r3, r0
 80048ae:	6011      	str	r1, [r2, #0]
 80048b0:	d1de      	bne.n	8004870 <_free_r+0x24>
 80048b2:	6818      	ldr	r0, [r3, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	4401      	add	r1, r0
 80048b8:	6011      	str	r1, [r2, #0]
 80048ba:	6053      	str	r3, [r2, #4]
 80048bc:	e7d8      	b.n	8004870 <_free_r+0x24>
 80048be:	d902      	bls.n	80048c6 <_free_r+0x7a>
 80048c0:	230c      	movs	r3, #12
 80048c2:	602b      	str	r3, [r5, #0]
 80048c4:	e7d4      	b.n	8004870 <_free_r+0x24>
 80048c6:	6820      	ldr	r0, [r4, #0]
 80048c8:	1821      	adds	r1, r4, r0
 80048ca:	428b      	cmp	r3, r1
 80048cc:	bf01      	itttt	eq
 80048ce:	6819      	ldreq	r1, [r3, #0]
 80048d0:	685b      	ldreq	r3, [r3, #4]
 80048d2:	1809      	addeq	r1, r1, r0
 80048d4:	6021      	streq	r1, [r4, #0]
 80048d6:	6063      	str	r3, [r4, #4]
 80048d8:	6054      	str	r4, [r2, #4]
 80048da:	e7c9      	b.n	8004870 <_free_r+0x24>
 80048dc:	bd38      	pop	{r3, r4, r5, pc}
 80048de:	bf00      	nop
 80048e0:	20000090 	.word	0x20000090

080048e4 <_malloc_r>:
 80048e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e6:	1ccd      	adds	r5, r1, #3
 80048e8:	f025 0503 	bic.w	r5, r5, #3
 80048ec:	3508      	adds	r5, #8
 80048ee:	2d0c      	cmp	r5, #12
 80048f0:	bf38      	it	cc
 80048f2:	250c      	movcc	r5, #12
 80048f4:	2d00      	cmp	r5, #0
 80048f6:	4606      	mov	r6, r0
 80048f8:	db01      	blt.n	80048fe <_malloc_r+0x1a>
 80048fa:	42a9      	cmp	r1, r5
 80048fc:	d903      	bls.n	8004906 <_malloc_r+0x22>
 80048fe:	230c      	movs	r3, #12
 8004900:	6033      	str	r3, [r6, #0]
 8004902:	2000      	movs	r0, #0
 8004904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004906:	f000 f87d 	bl	8004a04 <__malloc_lock>
 800490a:	4921      	ldr	r1, [pc, #132]	; (8004990 <_malloc_r+0xac>)
 800490c:	680a      	ldr	r2, [r1, #0]
 800490e:	4614      	mov	r4, r2
 8004910:	b99c      	cbnz	r4, 800493a <_malloc_r+0x56>
 8004912:	4f20      	ldr	r7, [pc, #128]	; (8004994 <_malloc_r+0xb0>)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	b923      	cbnz	r3, 8004922 <_malloc_r+0x3e>
 8004918:	4621      	mov	r1, r4
 800491a:	4630      	mov	r0, r6
 800491c:	f000 f862 	bl	80049e4 <_sbrk_r>
 8004920:	6038      	str	r0, [r7, #0]
 8004922:	4629      	mov	r1, r5
 8004924:	4630      	mov	r0, r6
 8004926:	f000 f85d 	bl	80049e4 <_sbrk_r>
 800492a:	1c43      	adds	r3, r0, #1
 800492c:	d123      	bne.n	8004976 <_malloc_r+0x92>
 800492e:	230c      	movs	r3, #12
 8004930:	4630      	mov	r0, r6
 8004932:	6033      	str	r3, [r6, #0]
 8004934:	f000 f86c 	bl	8004a10 <__malloc_unlock>
 8004938:	e7e3      	b.n	8004902 <_malloc_r+0x1e>
 800493a:	6823      	ldr	r3, [r4, #0]
 800493c:	1b5b      	subs	r3, r3, r5
 800493e:	d417      	bmi.n	8004970 <_malloc_r+0x8c>
 8004940:	2b0b      	cmp	r3, #11
 8004942:	d903      	bls.n	800494c <_malloc_r+0x68>
 8004944:	6023      	str	r3, [r4, #0]
 8004946:	441c      	add	r4, r3
 8004948:	6025      	str	r5, [r4, #0]
 800494a:	e004      	b.n	8004956 <_malloc_r+0x72>
 800494c:	6863      	ldr	r3, [r4, #4]
 800494e:	42a2      	cmp	r2, r4
 8004950:	bf0c      	ite	eq
 8004952:	600b      	streq	r3, [r1, #0]
 8004954:	6053      	strne	r3, [r2, #4]
 8004956:	4630      	mov	r0, r6
 8004958:	f000 f85a 	bl	8004a10 <__malloc_unlock>
 800495c:	f104 000b 	add.w	r0, r4, #11
 8004960:	1d23      	adds	r3, r4, #4
 8004962:	f020 0007 	bic.w	r0, r0, #7
 8004966:	1ac2      	subs	r2, r0, r3
 8004968:	d0cc      	beq.n	8004904 <_malloc_r+0x20>
 800496a:	1a1b      	subs	r3, r3, r0
 800496c:	50a3      	str	r3, [r4, r2]
 800496e:	e7c9      	b.n	8004904 <_malloc_r+0x20>
 8004970:	4622      	mov	r2, r4
 8004972:	6864      	ldr	r4, [r4, #4]
 8004974:	e7cc      	b.n	8004910 <_malloc_r+0x2c>
 8004976:	1cc4      	adds	r4, r0, #3
 8004978:	f024 0403 	bic.w	r4, r4, #3
 800497c:	42a0      	cmp	r0, r4
 800497e:	d0e3      	beq.n	8004948 <_malloc_r+0x64>
 8004980:	1a21      	subs	r1, r4, r0
 8004982:	4630      	mov	r0, r6
 8004984:	f000 f82e 	bl	80049e4 <_sbrk_r>
 8004988:	3001      	adds	r0, #1
 800498a:	d1dd      	bne.n	8004948 <_malloc_r+0x64>
 800498c:	e7cf      	b.n	800492e <_malloc_r+0x4a>
 800498e:	bf00      	nop
 8004990:	20000090 	.word	0x20000090
 8004994:	20000094 	.word	0x20000094

08004998 <_realloc_r>:
 8004998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499a:	4607      	mov	r7, r0
 800499c:	4614      	mov	r4, r2
 800499e:	460e      	mov	r6, r1
 80049a0:	b921      	cbnz	r1, 80049ac <_realloc_r+0x14>
 80049a2:	4611      	mov	r1, r2
 80049a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80049a8:	f7ff bf9c 	b.w	80048e4 <_malloc_r>
 80049ac:	b922      	cbnz	r2, 80049b8 <_realloc_r+0x20>
 80049ae:	f7ff ff4d 	bl	800484c <_free_r>
 80049b2:	4625      	mov	r5, r4
 80049b4:	4628      	mov	r0, r5
 80049b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049b8:	f000 f830 	bl	8004a1c <_malloc_usable_size_r>
 80049bc:	42a0      	cmp	r0, r4
 80049be:	d20f      	bcs.n	80049e0 <_realloc_r+0x48>
 80049c0:	4621      	mov	r1, r4
 80049c2:	4638      	mov	r0, r7
 80049c4:	f7ff ff8e 	bl	80048e4 <_malloc_r>
 80049c8:	4605      	mov	r5, r0
 80049ca:	2800      	cmp	r0, #0
 80049cc:	d0f2      	beq.n	80049b4 <_realloc_r+0x1c>
 80049ce:	4631      	mov	r1, r6
 80049d0:	4622      	mov	r2, r4
 80049d2:	f7ff ff13 	bl	80047fc <memcpy>
 80049d6:	4631      	mov	r1, r6
 80049d8:	4638      	mov	r0, r7
 80049da:	f7ff ff37 	bl	800484c <_free_r>
 80049de:	e7e9      	b.n	80049b4 <_realloc_r+0x1c>
 80049e0:	4635      	mov	r5, r6
 80049e2:	e7e7      	b.n	80049b4 <_realloc_r+0x1c>

080049e4 <_sbrk_r>:
 80049e4:	b538      	push	{r3, r4, r5, lr}
 80049e6:	2300      	movs	r3, #0
 80049e8:	4d05      	ldr	r5, [pc, #20]	; (8004a00 <_sbrk_r+0x1c>)
 80049ea:	4604      	mov	r4, r0
 80049ec:	4608      	mov	r0, r1
 80049ee:	602b      	str	r3, [r5, #0]
 80049f0:	f7fc ff26 	bl	8001840 <_sbrk>
 80049f4:	1c43      	adds	r3, r0, #1
 80049f6:	d102      	bne.n	80049fe <_sbrk_r+0x1a>
 80049f8:	682b      	ldr	r3, [r5, #0]
 80049fa:	b103      	cbz	r3, 80049fe <_sbrk_r+0x1a>
 80049fc:	6023      	str	r3, [r4, #0]
 80049fe:	bd38      	pop	{r3, r4, r5, pc}
 8004a00:	2000033c 	.word	0x2000033c

08004a04 <__malloc_lock>:
 8004a04:	4801      	ldr	r0, [pc, #4]	; (8004a0c <__malloc_lock+0x8>)
 8004a06:	f000 b811 	b.w	8004a2c <__retarget_lock_acquire_recursive>
 8004a0a:	bf00      	nop
 8004a0c:	20000344 	.word	0x20000344

08004a10 <__malloc_unlock>:
 8004a10:	4801      	ldr	r0, [pc, #4]	; (8004a18 <__malloc_unlock+0x8>)
 8004a12:	f000 b80c 	b.w	8004a2e <__retarget_lock_release_recursive>
 8004a16:	bf00      	nop
 8004a18:	20000344 	.word	0x20000344

08004a1c <_malloc_usable_size_r>:
 8004a1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a20:	1f18      	subs	r0, r3, #4
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	bfbc      	itt	lt
 8004a26:	580b      	ldrlt	r3, [r1, r0]
 8004a28:	18c0      	addlt	r0, r0, r3
 8004a2a:	4770      	bx	lr

08004a2c <__retarget_lock_acquire_recursive>:
 8004a2c:	4770      	bx	lr

08004a2e <__retarget_lock_release_recursive>:
 8004a2e:	4770      	bx	lr

08004a30 <_init>:
 8004a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a32:	bf00      	nop
 8004a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a36:	bc08      	pop	{r3}
 8004a38:	469e      	mov	lr, r3
 8004a3a:	4770      	bx	lr

08004a3c <_fini>:
 8004a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3e:	bf00      	nop
 8004a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a42:	bc08      	pop	{r3}
 8004a44:	469e      	mov	lr, r3
 8004a46:	4770      	bx	lr
